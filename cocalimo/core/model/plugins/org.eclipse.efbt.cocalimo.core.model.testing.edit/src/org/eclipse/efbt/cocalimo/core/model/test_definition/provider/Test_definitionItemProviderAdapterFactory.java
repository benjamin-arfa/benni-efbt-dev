/**
 */
package org.eclipse.efbt.cocalimo.core.model.test_definition.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.cocalimo.core.model.test_definition.util.Test_definitionAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Test_definitionItemProviderAdapterFactory extends Test_definitionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Test_definitionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestContraints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BDDTestContraintsItemProvider bddTestContraintsItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestContraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBDDTestContraintsAdapter() {
		if (bddTestContraintsItemProvider == null) {
			bddTestContraintsItemProvider = new BDDTestContraintsItemProvider(this);
		}

		return bddTestContraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestTemplateModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BDDTestTemplateModuleItemProvider bddTestTemplateModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestTemplateModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBDDTestTemplateModuleAdapter() {
		if (bddTestTemplateModuleItemProvider == null) {
			bddTestTemplateModuleItemProvider = new BDDTestTemplateModuleItemProvider(this);
		}

		return bddTestTemplateModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestTemplate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BDDTestTemplateItemProvider bddTestTemplateItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestTemplate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBDDTestTemplateAdapter() {
		if (bddTestTemplateItemProvider == null) {
			bddTestTemplateItemProvider = new BDDTestTemplateItemProvider(this);
		}

		return bddTestTemplateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestConstraintsModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BDDTestConstraintsModuleItemProvider bddTestConstraintsModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestConstraintsModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBDDTestConstraintsModuleAdapter() {
		if (bddTestConstraintsModuleItemProvider == null) {
			bddTestConstraintsModuleItemProvider = new BDDTestConstraintsModuleItemProvider(this);
		}

		return bddTestConstraintsModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BDDTestDefinitionItemProvider bddTestDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBDDTestDefinitionAdapter() {
		if (bddTestDefinitionItemProvider == null) {
			bddTestDefinitionItemProvider = new BDDTestDefinitionItemProvider(this);
		}

		return bddTestDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.E2EBDDTestDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected E2EBDDTestDefinitionItemProvider e2EBDDTestDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.E2EBDDTestDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createE2EBDDTestDefinitionAdapter() {
		if (e2EBDDTestDefinitionItemProvider == null) {
			e2EBDDTestDefinitionItemProvider = new E2EBDDTestDefinitionItemProvider(this);
		}

		return e2EBDDTestDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.UnitTestDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitTestDefinitionItemProvider unitTestDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.UnitTestDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitTestDefinitionAdapter() {
		if (unitTestDefinitionItemProvider == null) {
			unitTestDefinitionItemProvider = new UnitTestDefinitionItemProvider(this);
		}

		return unitTestDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Clause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClauseItemProvider clauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Clause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClauseAdapter() {
		if (clauseItemProvider == null) {
			clauseItemProvider = new ClauseItemProvider(this);
		}

		return clauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Param} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamItemProvider paramItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Param}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamAdapter() {
		if (paramItemProvider == null) {
			paramItemProvider = new ParamItemProvider(this);
		}

		return paramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Given} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GivenItemProvider givenItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Given}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGivenAdapter() {
		if (givenItemProvider == null) {
			givenItemProvider = new GivenItemProvider(this);
		}

		return givenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.When} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhenItemProvider whenItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.When}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhenAdapter() {
		if (whenItemProvider == null) {
			whenItemProvider = new WhenItemProvider(this);
		}

		return whenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Then} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThenItemProvider thenItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.Then}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThenAdapter() {
		if (thenItemProvider == null) {
			thenItemProvider = new ThenItemProvider(this);
		}

		return thenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.ClauseText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClauseTextItemProvider clauseTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.ClauseText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClauseTextAdapter() {
		if (clauseTextItemProvider == null) {
			clauseTextItemProvider = new ClauseTextItemProvider(this);
		}

		return clauseTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.CoverageGrid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoverageGridItemProvider coverageGridItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.CoverageGrid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoverageGridAdapter() {
		if (coverageGridItemProvider == null) {
			coverageGridItemProvider = new CoverageGridItemProvider(this);
		}

		return coverageGridItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.CoverageGridPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoverageGridPointItemProvider coverageGridPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.CoverageGridPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoverageGridPointAdapter() {
		if (coverageGridPointItemProvider == null) {
			coverageGridPointItemProvider = new CoverageGridPointItemProvider(this);
		}

		return coverageGridPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestDefinitionModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BDDTestDefinitionModuleItemProvider bddTestDefinitionModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.BDDTestDefinitionModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBDDTestDefinitionModuleAdapter() {
		if (bddTestDefinitionModuleItemProvider == null) {
			bddTestDefinitionModuleItemProvider = new BDDTestDefinitionModuleItemProvider(this);
		}

		return bddTestDefinitionModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.TestDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestDefinitionItemProvider testDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.TestDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestDefinitionAdapter() {
		if (testDefinitionItemProvider == null) {
			testDefinitionItemProvider = new TestDefinitionItemProvider(this);
		}

		return testDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.RegFunctionalityTestDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegFunctionalityTestDefinitionItemProvider regFunctionalityTestDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.RegFunctionalityTestDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegFunctionalityTestDefinitionAdapter() {
		if (regFunctionalityTestDefinitionItemProvider == null) {
			regFunctionalityTestDefinitionItemProvider = new RegFunctionalityTestDefinitionItemProvider(this);
		}

		return regFunctionalityTestDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.test_definition.RegFunctionalityTestDefinitionModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegFunctionalityTestDefinitionModuleItemProvider regFunctionalityTestDefinitionModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.test_definition.RegFunctionalityTestDefinitionModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegFunctionalityTestDefinitionModuleAdapter() {
		if (regFunctionalityTestDefinitionModuleItemProvider == null) {
			regFunctionalityTestDefinitionModuleItemProvider = new RegFunctionalityTestDefinitionModuleItemProvider(this);
		}

		return regFunctionalityTestDefinitionModuleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (bddTestContraintsItemProvider != null) bddTestContraintsItemProvider.dispose();
		if (bddTestTemplateModuleItemProvider != null) bddTestTemplateModuleItemProvider.dispose();
		if (bddTestTemplateItemProvider != null) bddTestTemplateItemProvider.dispose();
		if (bddTestConstraintsModuleItemProvider != null) bddTestConstraintsModuleItemProvider.dispose();
		if (bddTestDefinitionItemProvider != null) bddTestDefinitionItemProvider.dispose();
		if (e2EBDDTestDefinitionItemProvider != null) e2EBDDTestDefinitionItemProvider.dispose();
		if (unitTestDefinitionItemProvider != null) unitTestDefinitionItemProvider.dispose();
		if (clauseItemProvider != null) clauseItemProvider.dispose();
		if (paramItemProvider != null) paramItemProvider.dispose();
		if (givenItemProvider != null) givenItemProvider.dispose();
		if (whenItemProvider != null) whenItemProvider.dispose();
		if (thenItemProvider != null) thenItemProvider.dispose();
		if (clauseTextItemProvider != null) clauseTextItemProvider.dispose();
		if (coverageGridItemProvider != null) coverageGridItemProvider.dispose();
		if (coverageGridPointItemProvider != null) coverageGridPointItemProvider.dispose();
		if (bddTestDefinitionModuleItemProvider != null) bddTestDefinitionModuleItemProvider.dispose();
		if (testDefinitionItemProvider != null) testDefinitionItemProvider.dispose();
		if (regFunctionalityTestDefinitionItemProvider != null) regFunctionalityTestDefinitionItemProvider.dispose();
		if (regFunctionalityTestDefinitionModuleItemProvider != null) regFunctionalityTestDefinitionModuleItemProvider.dispose();
	}

}
