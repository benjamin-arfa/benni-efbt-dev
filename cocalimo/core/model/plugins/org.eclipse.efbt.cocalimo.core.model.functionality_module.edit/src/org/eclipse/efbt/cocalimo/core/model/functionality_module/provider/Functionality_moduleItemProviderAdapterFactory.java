/**
 */
package org.eclipse.efbt.cocalimo.core.model.functionality_module.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.cocalimo.core.model.functionality_module.util.Functionality_moduleAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Functionality_moduleItemProviderAdapterFactory extends Functionality_moduleAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Functionality_moduleItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.DataProcessingFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataProcessingFunctionalityModuleItemProvider dataProcessingFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.DataProcessingFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataProcessingFunctionalityModuleAdapter() {
		if (dataProcessingFunctionalityModuleItemProvider == null) {
			dataProcessingFunctionalityModuleItemProvider = new DataProcessingFunctionalityModuleItemProvider(this);
		}

		return dataProcessingFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.LeafFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafFunctionalityModuleItemProvider leafFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.LeafFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafFunctionalityModuleAdapter() {
		if (leafFunctionalityModuleItemProvider == null) {
			leafFunctionalityModuleItemProvider = new LeafFunctionalityModuleItemProvider(this);
		}

		return leafFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ParallelFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelFunctionalityModuleItemProvider parallelFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ParallelFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelFunctionalityModuleAdapter() {
		if (parallelFunctionalityModuleItemProvider == null) {
			parallelFunctionalityModuleItemProvider = new ParallelFunctionalityModuleItemProvider(this);
		}

		return parallelFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ScenarioSetFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioSetFunctionalityModuleItemProvider scenarioSetFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ScenarioSetFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioSetFunctionalityModuleAdapter() {
		if (scenarioSetFunctionalityModuleItemProvider == null) {
			scenarioSetFunctionalityModuleItemProvider = new ScenarioSetFunctionalityModuleItemProvider(this);
		}

		return scenarioSetFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.SerialFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerialFunctionalityModuleItemProvider serialFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.SerialFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerialFunctionalityModuleAdapter() {
		if (serialFunctionalityModuleItemProvider == null) {
			serialFunctionalityModuleItemProvider = new SerialFunctionalityModuleItemProvider(this);
		}

		return serialFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.FunctionalityModuleSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalityModuleSetItemProvider functionalityModuleSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.FunctionalityModuleSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalityModuleSetAdapter() {
		if (functionalityModuleSetItemProvider == null) {
			functionalityModuleSetItemProvider = new FunctionalityModuleSetItemProvider(this);
		}

		return functionalityModuleSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ReadDataSourceFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReadDataSourceFunctionalityModuleItemProvider readDataSourceFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ReadDataSourceFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReadDataSourceFunctionalityModuleAdapter() {
		if (readDataSourceFunctionalityModuleItemProvider == null) {
			readDataSourceFunctionalityModuleItemProvider = new ReadDataSourceFunctionalityModuleItemProvider(this);
		}

		return readDataSourceFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ReportCellCreationFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReportCellCreationFunctionalityModuleItemProvider reportCellCreationFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ReportCellCreationFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReportCellCreationFunctionalityModuleAdapter() {
		if (reportCellCreationFunctionalityModuleItemProvider == null) {
			reportCellCreationFunctionalityModuleItemProvider = new ReportCellCreationFunctionalityModuleItemProvider(this);
		}

		return reportCellCreationFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.FunctionalityModuleModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalityModuleModuleItemProvider functionalityModuleModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.FunctionalityModuleModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalityModuleModuleAdapter() {
		if (functionalityModuleModuleItemProvider == null) {
			functionalityModuleModuleItemProvider = new FunctionalityModuleModuleItemProvider(this);
		}

		return functionalityModuleModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.FunctionalityModuleTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalityModuleTagItemProvider functionalityModuleTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.FunctionalityModuleTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalityModuleTagAdapter() {
		if (functionalityModuleTagItemProvider == null) {
			functionalityModuleTagItemProvider = new FunctionalityModuleTagItemProvider(this);
		}

		return functionalityModuleTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ValidationFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidationFunctionalityModuleItemProvider validationFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ValidationFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidationFunctionalityModuleAdapter() {
		if (validationFunctionalityModuleItemProvider == null) {
			validationFunctionalityModuleItemProvider = new ValidationFunctionalityModuleItemProvider(this);
		}

		return validationFunctionalityModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ParallelChoiceFunctionalityModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelChoiceFunctionalityModuleItemProvider parallelChoiceFunctionalityModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.cocalimo.core.model.functionality_module.ParallelChoiceFunctionalityModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelChoiceFunctionalityModuleAdapter() {
		if (parallelChoiceFunctionalityModuleItemProvider == null) {
			parallelChoiceFunctionalityModuleItemProvider = new ParallelChoiceFunctionalityModuleItemProvider(this);
		}

		return parallelChoiceFunctionalityModuleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (dataProcessingFunctionalityModuleItemProvider != null) dataProcessingFunctionalityModuleItemProvider.dispose();
		if (leafFunctionalityModuleItemProvider != null) leafFunctionalityModuleItemProvider.dispose();
		if (parallelFunctionalityModuleItemProvider != null) parallelFunctionalityModuleItemProvider.dispose();
		if (scenarioSetFunctionalityModuleItemProvider != null) scenarioSetFunctionalityModuleItemProvider.dispose();
		if (serialFunctionalityModuleItemProvider != null) serialFunctionalityModuleItemProvider.dispose();
		if (functionalityModuleSetItemProvider != null) functionalityModuleSetItemProvider.dispose();
		if (readDataSourceFunctionalityModuleItemProvider != null) readDataSourceFunctionalityModuleItemProvider.dispose();
		if (reportCellCreationFunctionalityModuleItemProvider != null) reportCellCreationFunctionalityModuleItemProvider.dispose();
		if (functionalityModuleModuleItemProvider != null) functionalityModuleModuleItemProvider.dispose();
		if (functionalityModuleTagItemProvider != null) functionalityModuleTagItemProvider.dispose();
		if (validationFunctionalityModuleItemProvider != null) validationFunctionalityModuleItemProvider.dispose();
		if (parallelChoiceFunctionalityModuleItemProvider != null) parallelChoiceFunctionalityModuleItemProvider.dispose();
	}

}
