ProgramAndCalls : { program : dtmProgram :  { 
	
	executableLogic :[ dtmExecutableLogic CommodityCurvatureCreateSquaresLogic : { 
		
			 
			 datasetTransformationModules : [ VersionedDTMViewsModule   views : { 
			 	DTMViews : [ 
			 	
					EnrichmentView CommodityCurvatureFlooredMinimumShiftedTotalsSquared : { 
			 		 					cube : "CommodityCurvatureCreateSquaresCubes.freeBirdToolsCubeModule.CommodityCurvatureFlooredMinimumShiftedTotalsSquared"
			 		 					functions : [ 
			 		 						BasicColumnFunction CommodityCurvatureFlooredMinimumShiftedTotalsSquared_CommodityCurvatureFlooredMinimumShiftedTotalSquared : {
			 		 							cube : "CommodityCurvatureCreateSquaresCubes.freeBirdToolsCubeModule.CommodityCurvatureFlooredMinimumShiftedTotalsSquared"
			 		 							variable : "CommodityCurvatureMeasuresStaticModel.CommodityCurvatureMeasures.variablesModule.CommodityCurvatureFlooredMinimumShiftedTotalSquared"
			 		 							basicFunction : BasicFunction bf28 : {
			 		 								functionSpec : "commonFunctions.commonFunctionSpecModule.multiply" parameters :
			 		 								[
			 		 									BasicFunction bf29 : {
			 		 										functionSpec : "commonFunctions.commonFunctionSpecModule.max" 
			 		 										parameters : [
			 		 											SpeculativeCubeColumnParameter : {
			 		 												column : "CommodityCurvatureMeasuresStaticModel.CommodityCurvatureMeasures.variablesModule.CommodityCurvatureCVRk"
			 		 												cube : "CommodityCurvatureCalculateCVRCubes.freeBirdToolsCubeModule.CommodityCurvatureRiskChargeForRiskFactor"
			 		 											},
			 		 											ValueParameter : {
			 		 												dataType : :Double
			 		 												value : "0.0"
			 		 											}
			 		 										]
			 		 										},
			 		 									BasicFunction bf30 : {
			 		 										functionSpec : "commonFunctions.commonFunctionSpecModule.max" 
			 		 										parameters : [
			 		 											SpeculativeCubeColumnParameter : {
			 		 												column : "CommodityCurvatureMeasuresStaticModel.CommodityCurvatureMeasures.variablesModule.CommodityCurvatureCVRk"
			 		 												cube : "CommodityCurvatureCalculateCVRCubes.freeBirdToolsCubeModule.CommodityCurvatureRiskChargeForRiskFactor"
			 		 											},
			 		 											ValueParameter : {
			 		 												dataType : :Double
			 		 												value : "0.0"
			 		 											}
			 		 										]
			 		 										}
			 		 									]
			 		 										
			 		 									}
			 		 								} 
			 		 								]
			 		 								ignores : [ 
			 		 									IgnoreColumn : {
			 		 										columnToIgnore :  "CommodityCurvatureMeasuresStaticModel.CommodityCurvatureMeasures.variablesModule.CommodityCurvatureCVRk"
			 		 										cube : "CommodityCurvatureCalculateCVRCubes.freeBirdToolsCubeModule.CommodityCurvatureRiskChargeForRiskFactor"
			 		 									}
			 		 								]
			 		 								},
			 		 					AggregateEnrichmentView CommodityCurvatureTotalGroupedSummedMinimums : {
			 		 						cube : "CommodityCurvatureCreateSquaresCubes.freeBirdToolsCubeModule.CommodityCurvatureTotalGroupedSummedMinimums"
			 		 						functions : [ AggregateColumnFunction CommodityCurvatureTotalGroupedSummedMinimums_CommodityCurvatureTotalGroupedSummedMinimums : {
			 		 							cube : "CommodityCurvatureCreateSquaresCubes.freeBirdToolsCubeModule.CommodityCurvatureTotalGroupedSummedMinimums"
			 		 							variable : "CommodityCurvatureMeasuresStaticModel.CommodityCurvatureMeasures.variablesModule.CommodityCurvatureTotalGroupedSummedMinimums"
			 		 							aggregateFunction : AggregateFunction af4 : {
			 		 								functionSpec : "commonFunctions.commonFunctionSpecModule.SUM"
			 		 								parameters : [ SpeculativeCubeColumnParameter : {
			 		 									column :"CommodityCurvatureMeasuresStaticModel.CommodityCurvatureMeasures.variablesModule.CommodityCurvatureFlooredMinimumShiftedTotalSquared"
			 		 									cube : "CommodityCurvatureCreateSquaresCubes.freeBirdToolsCubeModule.CommodityCurvatureFlooredMinimumShiftedTotalsSquared"
			 		 									}
			 		 									]
			 		 									}
			 		 									}
			 		 									]
			 		 						groupByClause : GroupByClause : {
			 		 							groupByColumns : [
			 		 								"FRTBDerivedIdentifiersStaticModel.FRTBDerivedIdentifiersModel.variablesModule.bucketID",
			 		 								"FRTBSourceDimensionsStaticModel.FRTBSourceDimensionsModel.variablesModule.ShockDirection"
			 		 								]
			 		 								}
			 		 							}
			 		 				
			 		 				
			 		 						]
			 		 						}   ] }
			 ] } } 