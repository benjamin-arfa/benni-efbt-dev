/**
 */
package org.eclipse.efbt.language.dtm.model.dtm_views.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.language.dtm.model.dtm_views.util.dtm_viewsAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class dtm_viewsItemProviderAdapterFactory extends dtm_viewsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public dtm_viewsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.AggregateEnrichmentView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregateEnrichmentViewItemProvider aggregateEnrichmentViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.AggregateEnrichmentView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregateEnrichmentViewAdapter() {
		if (aggregateEnrichmentViewItemProvider == null) {
			aggregateEnrichmentViewItemProvider = new AggregateEnrichmentViewItemProvider(this);
		}

		return aggregateEnrichmentViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.CopyView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CopyViewItemProvider copyViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.CopyView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCopyViewAdapter() {
		if (copyViewItemProvider == null) {
			copyViewItemProvider = new CopyViewItemProvider(this);
		}

		return copyViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.EnrichmentView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnrichmentViewItemProvider enrichmentViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.EnrichmentView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnrichmentViewAdapter() {
		if (enrichmentViewItemProvider == null) {
			enrichmentViewItemProvider = new EnrichmentViewItemProvider(this);
		}

		return enrichmentViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.FilterByConditionView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterByConditionViewItemProvider filterByConditionViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.FilterByConditionView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterByConditionViewAdapter() {
		if (filterByConditionViewItemProvider == null) {
			filterByConditionViewItemProvider = new FilterByConditionViewItemProvider(this);
		}

		return filterByConditionViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.GenericView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericViewItemProvider genericViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.GenericView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericViewAdapter() {
		if (genericViewItemProvider == null) {
			genericViewItemProvider = new GenericViewItemProvider(this);
		}

		return genericViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.GroupByClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupByClauseItemProvider groupByClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.GroupByClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupByClauseAdapter() {
		if (groupByClauseItemProvider == null) {
			groupByClauseItemProvider = new GroupByClauseItemProvider(this);
		}

		return groupByClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.IgnoreColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IgnoreColumnItemProvider ignoreColumnItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.IgnoreColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIgnoreColumnAdapter() {
		if (ignoreColumnItemProvider == null) {
			ignoreColumnItemProvider = new IgnoreColumnItemProvider(this);
		}

		return ignoreColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.JoinView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinViewItemProvider joinViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.JoinView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinViewAdapter() {
		if (joinViewItemProvider == null) {
			joinViewItemProvider = new JoinViewItemProvider(this);
		}

		return joinViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.RenameAs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameAsItemProvider renameAsItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.RenameAs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameAsAdapter() {
		if (renameAsItemProvider == null) {
			renameAsItemProvider = new RenameAsItemProvider(this);
		}

		return renameAsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.SelectClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectClauseItemProvider selectClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.SelectClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectClauseAdapter() {
		if (selectClauseItemProvider == null) {
			selectClauseItemProvider = new SelectClauseItemProvider(this);
		}

		return selectClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.DTMView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTMViewItemProvider dtmViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.DTMView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTMViewAdapter() {
		if (dtmViewItemProvider == null) {
			dtmViewItemProvider = new DTMViewItemProvider(this);
		}

		return dtmViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.UnionView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnionViewItemProvider unionViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.UnionView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnionViewAdapter() {
		if (unionViewItemProvider == null) {
			unionViewItemProvider = new UnionViewItemProvider(this);
		}

		return unionViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.VersionedDTMViewsModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionedDTMViewsModuleItemProvider versionedDTMViewsModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.VersionedDTMViewsModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionedDTMViewsModuleAdapter() {
		if (versionedDTMViewsModuleItemProvider == null) {
			versionedDTMViewsModuleItemProvider = new VersionedDTMViewsModuleItemProvider(this);
		}

		return versionedDTMViewsModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.WhereClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhereClauseItemProvider whereClauseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.WhereClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhereClauseAdapter() {
		if (whereClauseItemProvider == null) {
			whereClauseItemProvider = new WhereClauseItemProvider(this);
		}

		return whereClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.CastColumnView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CastColumnViewItemProvider castColumnViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.CastColumnView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCastColumnViewAdapter() {
		if (castColumnViewItemProvider == null) {
			castColumnViewItemProvider = new CastColumnViewItemProvider(this);
		}

		return castColumnViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.ExplodeArrayOfStructsView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplodeArrayOfStructsViewItemProvider explodeArrayOfStructsViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.ExplodeArrayOfStructsView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplodeArrayOfStructsViewAdapter() {
		if (explodeArrayOfStructsViewItemProvider == null) {
			explodeArrayOfStructsViewItemProvider = new ExplodeArrayOfStructsViewItemProvider(this);
		}

		return explodeArrayOfStructsViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.ExplodeStructView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplodeStructViewItemProvider explodeStructViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.ExplodeStructView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplodeStructViewAdapter() {
		if (explodeStructViewItemProvider == null) {
			explodeStructViewItemProvider = new ExplodeStructViewItemProvider(this);
		}

		return explodeStructViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.FilterByStructClassColumnView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterByStructClassColumnViewItemProvider filterByStructClassColumnViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.FilterByStructClassColumnView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterByStructClassColumnViewAdapter() {
		if (filterByStructClassColumnViewItemProvider == null) {
			filterByStructClassColumnViewItemProvider = new FilterByStructClassColumnViewItemProvider(this);
		}

		return filterByStructClassColumnViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.MakeArrayOfStructsView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MakeArrayOfStructsViewItemProvider makeArrayOfStructsViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.MakeArrayOfStructsView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMakeArrayOfStructsViewAdapter() {
		if (makeArrayOfStructsViewItemProvider == null) {
			makeArrayOfStructsViewItemProvider = new MakeArrayOfStructsViewItemProvider(this);
		}

		return makeArrayOfStructsViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.MakeStructView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MakeStructViewItemProvider makeStructViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.MakeStructView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMakeStructViewAdapter() {
		if (makeStructViewItemProvider == null) {
			makeStructViewItemProvider = new MakeStructViewItemProvider(this);
		}

		return makeStructViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.dtm_views.AggregateEnrichmentViewAndOrderBy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregateEnrichmentViewAndOrderByItemProvider aggregateEnrichmentViewAndOrderByItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.dtm_views.AggregateEnrichmentViewAndOrderBy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregateEnrichmentViewAndOrderByAdapter() {
		if (aggregateEnrichmentViewAndOrderByItemProvider == null) {
			aggregateEnrichmentViewAndOrderByItemProvider = new AggregateEnrichmentViewAndOrderByItemProvider(this);
		}

		return aggregateEnrichmentViewAndOrderByItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (aggregateEnrichmentViewItemProvider != null) aggregateEnrichmentViewItemProvider.dispose();
		if (copyViewItemProvider != null) copyViewItemProvider.dispose();
		if (enrichmentViewItemProvider != null) enrichmentViewItemProvider.dispose();
		if (filterByConditionViewItemProvider != null) filterByConditionViewItemProvider.dispose();
		if (genericViewItemProvider != null) genericViewItemProvider.dispose();
		if (groupByClauseItemProvider != null) groupByClauseItemProvider.dispose();
		if (ignoreColumnItemProvider != null) ignoreColumnItemProvider.dispose();
		if (joinViewItemProvider != null) joinViewItemProvider.dispose();
		if (renameAsItemProvider != null) renameAsItemProvider.dispose();
		if (selectClauseItemProvider != null) selectClauseItemProvider.dispose();
		if (dtmViewItemProvider != null) dtmViewItemProvider.dispose();
		if (unionViewItemProvider != null) unionViewItemProvider.dispose();
		if (versionedDTMViewsModuleItemProvider != null) versionedDTMViewsModuleItemProvider.dispose();
		if (whereClauseItemProvider != null) whereClauseItemProvider.dispose();
		if (castColumnViewItemProvider != null) castColumnViewItemProvider.dispose();
		if (explodeArrayOfStructsViewItemProvider != null) explodeArrayOfStructsViewItemProvider.dispose();
		if (explodeStructViewItemProvider != null) explodeStructViewItemProvider.dispose();
		if (filterByStructClassColumnViewItemProvider != null) filterByStructClassColumnViewItemProvider.dispose();
		if (makeArrayOfStructsViewItemProvider != null) makeArrayOfStructsViewItemProvider.dispose();
		if (makeStructViewItemProvider != null) makeStructViewItemProvider.dispose();
		if (aggregateEnrichmentViewAndOrderByItemProvider != null) aggregateEnrichmentViewAndOrderByItemProvider.dispose();
	}

}
