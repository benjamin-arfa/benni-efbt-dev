/**
 */
package org.eclipse.efbt.language.dtm.model.domain_model_mapping.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.language.dtm.model.domain_model_mapping.util.Domain_model_mappingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Domain_model_mappingItemProviderAdapterFactory extends Domain_model_mappingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Domain_model_mappingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.LeafModuleToVersionedSQLViewsModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafModuleToVersionedSQLViewsModuleItemProvider leafModuleToVersionedSQLViewsModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.LeafModuleToVersionedSQLViewsModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafModuleToVersionedSQLViewsModuleAdapter() {
		if (leafModuleToVersionedSQLViewsModuleItemProvider == null) {
			leafModuleToVersionedSQLViewsModuleItemProvider = new LeafModuleToVersionedSQLViewsModuleItemProvider(this);
		}

		return leafModuleToVersionedSQLViewsModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.LeafModuleToVersionedCubeSchemaModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafModuleToVersionedCubeSchemaModuleItemProvider leafModuleToVersionedCubeSchemaModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.LeafModuleToVersionedCubeSchemaModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafModuleToVersionedCubeSchemaModuleAdapter() {
		if (leafModuleToVersionedCubeSchemaModuleItemProvider == null) {
			leafModuleToVersionedCubeSchemaModuleItemProvider = new LeafModuleToVersionedCubeSchemaModuleItemProvider(this);
		}

		return leafModuleToVersionedCubeSchemaModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.LeafModuleToReportCellViewModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafModuleToReportCellViewModuleItemProvider leafModuleToReportCellViewModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.LeafModuleToReportCellViewModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafModuleToReportCellViewModuleAdapter() {
		if (leafModuleToReportCellViewModuleItemProvider == null) {
			leafModuleToReportCellViewModuleItemProvider = new LeafModuleToReportCellViewModuleItemProvider(this);
		}

		return leafModuleToReportCellViewModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.ScenarioToCodeConditions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioToCodeConditionsItemProvider scenarioToCodeConditionsItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.ScenarioToCodeConditions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioToCodeConditionsAdapter() {
		if (scenarioToCodeConditionsItemProvider == null) {
			scenarioToCodeConditionsItemProvider = new ScenarioToCodeConditionsItemProvider(this);
		}

		return scenarioToCodeConditionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.CodeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeConditionItemProvider codeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.CodeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeConditionAdapter() {
		if (codeConditionItemProvider == null) {
			codeConditionItemProvider = new CodeConditionItemProvider(this);
		}

		return codeConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.ColumnSettingCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnSettingConditionItemProvider columnSettingConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.ColumnSettingCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnSettingConditionAdapter() {
		if (columnSettingConditionItemProvider == null) {
			columnSettingConditionItemProvider = new ColumnSettingConditionItemProvider(this);
		}

		return columnSettingConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.DataSetFilterCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSetFilterConditionItemProvider dataSetFilterConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.DataSetFilterCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSetFilterConditionAdapter() {
		if (dataSetFilterConditionItemProvider == null) {
			dataSetFilterConditionItemProvider = new DataSetFilterConditionItemProvider(this);
		}

		return dataSetFilterConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.UnionChoiceCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnionChoiceConditionItemProvider unionChoiceConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.UnionChoiceCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnionChoiceConditionAdapter() {
		if (unionChoiceConditionItemProvider == null) {
			unionChoiceConditionItemProvider = new UnionChoiceConditionItemProvider(this);
		}

		return unionChoiceConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.DomainMappingModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainMappingModuleItemProvider domainMappingModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.language.dtm.model.domain_model_mapping.DomainMappingModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainMappingModuleAdapter() {
		if (domainMappingModuleItemProvider == null) {
			domainMappingModuleItemProvider = new DomainMappingModuleItemProvider(this);
		}

		return domainMappingModuleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (leafModuleToVersionedSQLViewsModuleItemProvider != null) leafModuleToVersionedSQLViewsModuleItemProvider.dispose();
		if (leafModuleToVersionedCubeSchemaModuleItemProvider != null) leafModuleToVersionedCubeSchemaModuleItemProvider.dispose();
		if (leafModuleToReportCellViewModuleItemProvider != null) leafModuleToReportCellViewModuleItemProvider.dispose();
		if (scenarioToCodeConditionsItemProvider != null) scenarioToCodeConditionsItemProvider.dispose();
		if (codeConditionItemProvider != null) codeConditionItemProvider.dispose();
		if (columnSettingConditionItemProvider != null) columnSettingConditionItemProvider.dispose();
		if (dataSetFilterConditionItemProvider != null) dataSetFilterConditionItemProvider.dispose();
		if (unionChoiceConditionItemProvider != null) unionChoiceConditionItemProvider.dispose();
		if (domainMappingModuleItemProvider != null) domainMappingModuleItemProvider.dispose();
	}

}
