/*******************************************************************************
 * Copyright (c) 2020 Bird Software Solutions Ltd
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDE-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Neil Mackenzie - initial API and implementation
 *******************************************************************************/

grammar org.eclipse.efbt.regdna.dsl.regdna with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/regdna" as regdna


Module returns regdna::Module:
	RequirementsModule | TagGroup | GenerationRulesModule | ELPackage | ReportModule;
	
ELClassifier returns regdna::ELClassifier:
	ELClass | ELDataType_Impl | ELEnum ;


ELStructuralFeature returns regdna::ELStructuralFeature:
	ELAttribute | ELReference;


RequirementsSection returns regdna::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;


SelectColumn returns regdna::SelectColumn:
	 SelectColumnMemberAs | SelectColumnAttributeAs | SelectDerivedColumnAs | SelectValueAs;



EString returns ecore::EString:
	STRING ;


RequirementsModule returns regdna::RequirementsModule:
	{regdna::RequirementsModule}
	'requirementsModule'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[regdna::Module|QualifiedName])*
		('theRules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?		
		('theAllowedtypes' allowedtypes=AllowedTypes)?
	'}';

GenerationRulesModule returns regdna::GenerationRulesModule:
	{regdna::GenerationRulesModule}
	'generationRuleModule'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[regdna::Module|QualifiedName])*
		('generationRules' '{' rulesForReport+=RulesForReport ( "," rulesForReport+=RulesForReport)* '}' )?
	'}';



ELAttribute returns regdna::ELAttribute:
	{regdna::ELAttribute}
	(iD?='id')?
	eAttributeType=[regdna::ELDataType|QualifiedName] ("[" ((  lowerBound=EInt) ".." ( upperBound=EInt))?   "]")?
	name=ID 
	;


ELClass returns regdna::ELClass:
	{regdna::ELClass}
	((eAbstract?='abstract'? 'class') ) name = ID
	('extends' eSuperTypes+=[regdna::ELClass|QualifiedName] (',' eSuperTypes+=[regdna::ELClass|QualifiedName])*)?
	'{'
	   (eStructuralFeatures+=ELStructuralFeature)*
	   (eOperations+=ELOperation)*
	'}'
	;

ELDataType_Impl returns regdna::ELDataType:
	{regdna::ELDataType}
	'type' name = ID
	'wraps' industryName = ID
	
	;

ELEnum returns regdna::ELEnum:
	{regdna::ELEnum}
	'enum' name = ID
	'{'
	  (eLiterals+=ELEnumLiteral ((',')? eLiterals+=ELEnumLiteral)*)?
	'}';

ELOperation returns regdna::ELOperation:
	ELPublicOperation | ELPrivateOperation;
	
	
ELPublicOperation returns regdna::ELPublicOperation:
	{regdna::ELPublicOperation}
	'op'
	eType=[regdna::ELClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	'()'
	'{'(body=EString)?'}'
	;
	
ELPrivateOperation returns regdna::ELPrivateOperation:
	{regdna::ELPrivateOperation}
	'private_op'
	eType=[regdna::ELClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	'('(eParameters+=ELParameter (',' eParameters+=ELParameter)*)?')'
	'{'(body=EString)?'}'
	;


ELParameter returns regdna::ELParameter:

    eType=[regdna::ELClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
    name=ID
;

ELReference returns regdna::ELReference:
	{regdna::ELReference}
	((containment?='contains' ) |
	 ('refers') 
	)
	eType=[regdna::ELClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	;


ELEnumLiteral returns regdna::ELEnumLiteral:
	{regdna::ELEnumLiteral}
	name=ID
    ('as' literal=STRING)?
    ('=' value=EInt)?
    ;

EInt returns ecore::EInt:
	'-'? INT;


QualifiedName:
	ID ('.' ID)*;
	
Import returns regdna::Import:
	{regdna::Import}
        'import' importedNamespace=QualifiedNameWithWildcard;


QualifiedNameWithWildcard :
	QualifiedName '.*'?;
	



TitledRequirementsSection returns regdna::TitledRequirementsSection:
	'titledRequirementsSection'
	name=ID
	'{'
		('theTitle' title=EString)?
		('theReferencingSections' referencingSections=[regdna::RequirementsSectionLinkWithText|QualifiedName])?
		'theRequirementsType' requirementsType=[regdna::RequirementType|QualifiedName]
		('theSections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';
	


AllowedTypes returns regdna::AllowedTypes:
	{regdna::AllowedTypes}
	'allAllowedTypes'
	'{'
		('theAllowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';





TagGroup returns regdna::TagGroup:
	{regdna::TagGroup}
	'tagGroup'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[regdna::Module|QualifiedName])*
		('theTags' '{' tags+=Tag ( "," tags+=Tag)* '}' )?
	'}';
	
Tag returns regdna::Tag:
	Tag_Impl | OperationTag;
	
OperationTag returns regdna::OperationTag:
	{regdna::OperationTag}
	'operationTag'
	name=ID
	'{'
		('theDisplayName' displayName=EString)?
		('theRequirements' '(' requirements+=[regdna::TitledRequirementsSection|QualifiedName] ( "," requirements+=[regdna::TitledRequirementsSection|QualifiedName])* ')' )?
		('theOperation' operation=[regdna::ELOperation|QualifiedName])?
	'}';

Tag_Impl returns regdna::Tag:
	{regdna::Tag}
	'tag'
	name=ID
	'{'
		('theDisplayName' displayName=EString)?
		('theRequirements' '(' requirements+=[regdna::TitledRequirementsSection|QualifiedName] ( "," requirements+=[regdna::TitledRequirementsSection|QualifiedName])* ')' )?
	'}';



RequirementsSectionLinkWithText returns regdna::RequirementsSectionLinkWithText:
	{regdna::RequirementsSectionLinkWithText}
	'requirementsSectionLinkWithText'
	name=ID
	'{'
		('theLinkText' linkText=EString)?
		('theSubsection' subsection=EString)?
		('theLinkedRuleSection' linkedRuleSection=[regdna::TitledRequirementsSection|QualifiedName])?
	'}';

RequirementType returns regdna::RequirementType:
	{regdna::RequirementType}
	'requirementType'
	name=ID;

RequirementsSectionImage returns regdna::RequirementsSectionImage:
	{regdna::RequirementsSectionImage}
	'requirementsSectionImage'
	name=ID
	'{'
		('theStyle' style=EString)?
		('theUri' uri=EString)?
	'}';

RequirementsSectionText returns regdna::RequirementsSectionText:
	{regdna::RequirementsSectionText}
	'requirementsSectionText'
	name=ID
	'{'
		('theText' text=EString)?
	'}';

ELPackage returns regdna::ELPackage:
	{regdna::ELPackage}
	'package'
	name = QualifiedName
	(imports += Import)*
	(eClassifiers += ELClassifier)*
	;

RulesForReport returns regdna::RulesForReport:
	{regdna::RulesForReport}
	'report' outputLayerCube=[regdna::ELClass|QualifiedName]
	'{'
		(rulesForTable+=RulesForILTable (rulesForTable+=RulesForILTable)*  )?
	'}';
	
RulesForILTable returns regdna::RulesForILTable:
	{regdna::RulesForILTable}
	'ILTable' inputLayerTable=[regdna::ELClass|QualifiedName]
	'{'
		(rulesForTablePart+=RuleForILTablePart (rulesForTablePart+=RuleForILTablePart)*  )?
	'}';
	
RuleForILTablePart returns regdna::RuleForILTablePart:
	{regdna::RuleForILTablePart}
	'tablePart'
	name=ID
	'{'
		( columns+=SelectColumn ( columns+=SelectColumn)*  )?
		('where' whereClause=TableFilter)?
	'}';



	
	
TableFilter returns regdna::TableFilter:
	{regdna::TableFilter}
		 (predicate=Predicate )?
	;

Predicate returns regdna::Predicate:
	AndPredicate | OrPredicate | NotPredicate | AttributePredicate;
	
AndPredicate returns regdna::AndPredicate:
	{regdna::AndPredicate}
	'And('
		(operands+=Predicate ( "and" operands+=Predicate)*  )?
	')'
;

OrPredicate returns regdna::OrPredicate:
	{regdna::OrPredicate}
	'Or('
		(operands+=Predicate ( "or" operands+=Predicate)*  )?
	')'
;

NotPredicate returns regdna::NotPredicate:
	{regdna::NotPredicate}
	'Not('
		( operand=Predicate)?
	')';

AttributePredicate returns regdna::AttributePredicate:
	{regdna::AttributePredicate}
	'filter'

		( attribute1=[regdna::ELAttribute|QualifiedName])?
		( comparitor=Comparitor)?
		('theMember' member=[regdna::ELEnumLiteral|QualifiedName])?
		('theValue' value=EString)?
	;
	
SelectColumnMemberAs returns regdna::SelectColumnMemberAs:
	{regdna::SelectColumnMemberAs}
	'selectMember'
		( memberAsConstant=[regdna::ELEnumLiteral|QualifiedName])?
		('as' asAttribute=[regdna::ELPublicOperation|QualifiedName])?
		;
	
SelectColumnAttributeAs returns regdna::SelectColumnAttributeAs:
	{regdna::SelectColumnAttributeAs}
	'selectAttribute'
		( attribute=[regdna::ELAttribute|QualifiedName])?
		('as' asAttribute=[regdna::ELPublicOperation|QualifiedName])?
	;
	
SelectDerivedColumnAs returns regdna::SelectDerivedColumnAs:
	{regdna::SelectDerivedColumnAs}
	'selectDerivedAttribute'
		( attribute=[regdna::ELPublicOperation|QualifiedName])?
		('as' asAttribute=[regdna::ELPublicOperation|QualifiedName])?
	;
	
SelectValueAs returns regdna::SelectValueAs:
	{regdna::SelectValueAs}
	'selectValue'
		( value=EString)?
		('as' asAttribute=[regdna::ELPublicOperation|QualifiedName])?
	;
	
ReportModule returns regdna::ReportModule:
	{regdna::ReportModule}
	'ReportModule'
	name=QualifiedName
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' '(' dependencies+=[regdna::Module|QualifiedName] ( "," dependencies+=[regdna::Module|QualifiedName])* ')' )?
		('imports' '{' imports+=Import ( "," imports+=Import)* '}' )?
		('reports' '{' reports+=Report ( "," reports+=Report)* '}' )?
	'}';
	
Report returns regdna::Report:
	{regdna::Report}
	'Report'
	'{'
		('outputLayer' outputLayer=[regdna::ELClass|QualifiedName])?
		('rows' '{' rows+=ReportRow ( "," rows+=ReportRow)* '}' )?
		('columns' '{' columns+=ReportColumn ( "," columns+=ReportColumn)* '}' )?
		('reportCells' '{' reportCells+=ReportCell ( "," reportCells+=ReportCell)* '}' )?
	'}';

ReportRow returns regdna::ReportRow:
	{regdna::ReportRow}
	'ReportRow'
	name=ID;

ReportColumn returns regdna::ReportColumn:
	{regdna::ReportColumn}
	'ReportColumn'
	name=ID;

ReportCell returns regdna::ReportCell:
	{regdna::ReportCell}
	'ReportCell'
	'{'
		('datapointID' datapointID=EString)?
		('row' row=[regdna::ReportRow|QualifiedName])?
		('column' column=[regdna::ReportColumn|QualifiedName])?
		('metric' metric=[regdna::ELAttribute|QualifiedName])?
		('filters' '{' filters+=Filter ( "," filters+=Filter)* '}' )?
	'}';

Filter returns regdna::Filter:
	{regdna::Filter}
	'Filter'
	'{'
		('outputLayer' outputLayer=[regdna::ELClass|QualifiedName])?
		('operation' operation=[regdna::ELOperation|QualifiedName])?
		('member' '(' member+=[regdna::ELEnumLiteral|QualifiedName] ( "," member+=[regdna::ELEnumLiteral|QualifiedName])* ')' )?
	'}';

enum Comparitor returns regdna::Comparitor:
				less_than = 'is_less_than' | equals = 'is_equals' | not_equals = 'is_not_equals' | greater_than = 'is_greater_than';


	