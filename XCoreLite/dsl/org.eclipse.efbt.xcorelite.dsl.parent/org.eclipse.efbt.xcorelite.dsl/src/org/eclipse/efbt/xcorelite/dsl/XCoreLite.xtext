/*******************************************************************************
 * Copyright (c) 2020 Bird Software Solutions Ltd
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Neil Mackenzie - initial API and implementation
 *******************************************************************************/

grammar org.eclipse.efbt.openregspecs.dsl.XCoreLite with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/xcorelite" as xcorelite


XPackage returns xcorelite::XPackage:
	{xcorelite::XPackage}
	'package'
	name = QualifiedName
	(imports += Import)*
	(classifiers += XClassifier)*
	;
	
XClassifier returns xcorelite::XClassifier:
	XClass | XDataType_Impl | XEnum ;


XMember returns xcorelite::XMember:
	XAttribute | XOperation | XReference;



EString returns ecore::EString:
	STRING ;



XAttribute returns xcorelite::XAttribute:
	{xcorelite::XAttribute}
	(iD?='id')?
	type=[xcorelite::XClassifier|QualifiedName] ("[" ((  lowerBound=EInt) ".." ( upperBound=EInt))?   "]")?
	name=ID 
	;

XClass returns xcorelite::XClass:
	{xcorelite::XClass}
	((abstract?='abstract'? 'class') ) name = ID
	('extends' superTypes+=[xcorelite::XClass|QualifiedName] (',' superTypes+=[xcorelite::XClass|QualifiedName])*)?
	'{'
	   (members+=XMember)*
	'}'
	;

XDataType_Impl returns xcorelite::XDataType:
	{xcorelite::XDataType}
	'type' name = ID
	'wraps' industryName = ID
	
	;

XEnum returns xcorelite::XEnum:
	{xcorelite::XEnum}
	'enum' name = ID
	'{'
	  (literals+=XEnumLiteral ((',')? literals+=XEnumLiteral)*)?
	'}';

XOperation returns xcorelite::XOperation:
	{xcorelite::XOperation}
	'op'
	type=[xcorelite::XClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	'()'
	'{'(body=EString)?'}'
	;

XReference returns xcorelite::XReference:
	{xcorelite::XReference}
	((containment?='contains' ) |
	 ('refers') 
	)
	type=[xcorelite::XClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	;


XEnumLiteral returns xcorelite::XEnumLiteral:
	{xcorelite::XEnumLiteral}
	name=ID
    ('as' literal=STRING)?
    ('=' value=EInt)?
    ;

EInt returns ecore::EInt:
	'-'? INT;


QualifiedName:
	ID ('.' ID)*;
	
Import returns xcorelite::Import:
	{xcorelite::Import}
        'import' importedNamespace=QualifiedNameWithWildcard;


QualifiedNameWithWildcard :
	QualifiedName '.*'?;
	





