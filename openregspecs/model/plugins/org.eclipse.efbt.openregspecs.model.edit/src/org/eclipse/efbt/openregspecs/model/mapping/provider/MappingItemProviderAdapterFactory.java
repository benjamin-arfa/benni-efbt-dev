/**
 */
package org.eclipse.efbt.openregspecs.model.mapping.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.openregspecs.model.mapping.util.MappingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MappingItemProviderAdapterFactory extends MappingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MappingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.CUBE_MAPPING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_MAPPINGItemProvider cubE_MAPPINGItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.CUBE_MAPPING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_MAPPINGAdapter() {
		if (cubE_MAPPINGItemProvider == null) {
			cubE_MAPPINGItemProvider = new CUBE_MAPPINGItemProvider(this);
		}

		return cubE_MAPPINGItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.MEMBER_MAPPING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MEMBER_MAPPINGItemProvider membeR_MAPPINGItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.MEMBER_MAPPING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMEMBER_MAPPINGAdapter() {
		if (membeR_MAPPINGItemProvider == null) {
			membeR_MAPPINGItemProvider = new MEMBER_MAPPINGItemProvider(this);
		}

		return membeR_MAPPINGItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.MEMBER_MAPPING_ITEM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MEMBER_MAPPING_ITEMItemProvider membeR_MAPPING_ITEMItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.MEMBER_MAPPING_ITEM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMEMBER_MAPPING_ITEMAdapter() {
		if (membeR_MAPPING_ITEMItemProvider == null) {
			membeR_MAPPING_ITEMItemProvider = new MEMBER_MAPPING_ITEMItemProvider(this);
		}

		return membeR_MAPPING_ITEMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.VARIABLE_MAPPING_ITEM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VARIABLE_MAPPING_ITEMItemProvider variablE_MAPPING_ITEMItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.VARIABLE_MAPPING_ITEM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVARIABLE_MAPPING_ITEMAdapter() {
		if (variablE_MAPPING_ITEMItemProvider == null) {
			variablE_MAPPING_ITEMItemProvider = new VARIABLE_MAPPING_ITEMItemProvider(this);
		}

		return variablE_MAPPING_ITEMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.VARIABLE_MAPPING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VARIABLE_MAPPINGItemProvider variablE_MAPPINGItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.VARIABLE_MAPPING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVARIABLE_MAPPINGAdapter() {
		if (variablE_MAPPINGItemProvider == null) {
			variablE_MAPPINGItemProvider = new VARIABLE_MAPPINGItemProvider(this);
		}

		return variablE_MAPPINGItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.MAPPING_TO_CUBE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MAPPING_TO_CUBEItemProvider mappinG_TO_CUBEItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.MAPPING_TO_CUBE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMAPPING_TO_CUBEAdapter() {
		if (mappinG_TO_CUBEItemProvider == null) {
			mappinG_TO_CUBEItemProvider = new MAPPING_TO_CUBEItemProvider(this);
		}

		return mappinG_TO_CUBEItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.VARIABLE_SET_MAPPING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VARIABLE_SET_MAPPINGItemProvider variablE_SET_MAPPINGItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.VARIABLE_SET_MAPPING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVARIABLE_SET_MAPPINGAdapter() {
		if (variablE_SET_MAPPINGItemProvider == null) {
			variablE_SET_MAPPINGItemProvider = new VARIABLE_SET_MAPPINGItemProvider(this);
		}

		return variablE_SET_MAPPINGItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.mapping.MAPPING_DEFINITION} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MAPPING_DEFINITIONItemProvider mappinG_DEFINITIONItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.mapping.MAPPING_DEFINITION}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMAPPING_DEFINITIONAdapter() {
		if (mappinG_DEFINITIONItemProvider == null) {
			mappinG_DEFINITIONItemProvider = new MAPPING_DEFINITIONItemProvider(this);
		}

		return mappinG_DEFINITIONItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cubE_MAPPINGItemProvider != null) cubE_MAPPINGItemProvider.dispose();
		if (membeR_MAPPINGItemProvider != null) membeR_MAPPINGItemProvider.dispose();
		if (membeR_MAPPING_ITEMItemProvider != null) membeR_MAPPING_ITEMItemProvider.dispose();
		if (variablE_MAPPING_ITEMItemProvider != null) variablE_MAPPING_ITEMItemProvider.dispose();
		if (variablE_MAPPINGItemProvider != null) variablE_MAPPINGItemProvider.dispose();
		if (mappinG_TO_CUBEItemProvider != null) mappinG_TO_CUBEItemProvider.dispose();
		if (variablE_SET_MAPPINGItemProvider != null) variablE_SET_MAPPINGItemProvider.dispose();
		if (mappinG_DEFINITIONItemProvider != null) mappinG_DEFINITIONItemProvider.dispose();
	}

}
