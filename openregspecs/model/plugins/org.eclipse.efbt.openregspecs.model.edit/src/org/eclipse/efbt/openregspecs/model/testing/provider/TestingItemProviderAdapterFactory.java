/**
 */
package org.eclipse.efbt.openregspecs.model.testing.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.openregspecs.model.testing.util.TestingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TestingItemProviderAdapterFactory extends TestingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TestingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.LogicalTransformationModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalTransformationModuleItemProvider logicalTransformationModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.LogicalTransformationModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalTransformationModuleAdapter() {
		if (logicalTransformationModuleItemProvider == null) {
			logicalTransformationModuleItemProvider = new LogicalTransformationModuleItemProvider(this);
		}

		return logicalTransformationModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.ActivityTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityTagItemProvider activityTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.ActivityTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityTagAdapter() {
		if (activityTagItemProvider == null) {
			activityTagItemProvider = new ActivityTagItemProvider(this);
		}

		return activityTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.ScenarioTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioTagItemProvider scenarioTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.ScenarioTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioTagAdapter() {
		if (scenarioTagItemProvider == null) {
			scenarioTagItemProvider = new ScenarioTagItemProvider(this);
		}

		return scenarioTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestItemProvider testItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestAdapter() {
		if (testItemProvider == null) {
			testItemProvider = new TestItemProvider(this);
		}

		return testItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.TestModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestModuleItemProvider testModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.TestModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestModuleAdapter() {
		if (testModuleItemProvider == null) {
			testModuleItemProvider = new TestModuleItemProvider(this);
		}

		return testModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.DataConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataConstraintItemProvider dataConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.DataConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataConstraintAdapter() {
		if (dataConstraintItemProvider == null) {
			dataConstraintItemProvider = new DataConstraintItemProvider(this);
		}

		return dataConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.SelectionLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionLayerItemProvider selectionLayerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.SelectionLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionLayerAdapter() {
		if (selectionLayerItemProvider == null) {
			selectionLayerItemProvider = new SelectionLayerItemProvider(this);
		}

		return selectionLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.TestScope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestScopeItemProvider testScopeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.TestScope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestScopeAdapter() {
		if (testScopeItemProvider == null) {
			testScopeItemProvider = new TestScopeItemProvider(this);
		}

		return testScopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.UnitTestScope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitTestScopeItemProvider unitTestScopeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.UnitTestScope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitTestScopeAdapter() {
		if (unitTestScopeItemProvider == null) {
			unitTestScopeItemProvider = new UnitTestScopeItemProvider(this);
		}

		return unitTestScopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.E2ETestScope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected E2ETestScopeItemProvider e2ETestScopeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.E2ETestScope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createE2ETestScopeAdapter() {
		if (e2ETestScopeItemProvider == null) {
			e2ETestScopeItemProvider = new E2ETestScopeItemProvider(this);
		}

		return e2ETestScopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.testing.CSVFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CSVFileItemProvider csvFileItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.testing.CSVFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCSVFileAdapter() {
		if (csvFileItemProvider == null) {
			csvFileItemProvider = new CSVFileItemProvider(this);
		}

		return csvFileItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (logicalTransformationModuleItemProvider != null) logicalTransformationModuleItemProvider.dispose();
		if (activityTagItemProvider != null) activityTagItemProvider.dispose();
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (scenarioTagItemProvider != null) scenarioTagItemProvider.dispose();
		if (testItemProvider != null) testItemProvider.dispose();
		if (testModuleItemProvider != null) testModuleItemProvider.dispose();
		if (dataConstraintItemProvider != null) dataConstraintItemProvider.dispose();
		if (selectionLayerItemProvider != null) selectionLayerItemProvider.dispose();
		if (testScopeItemProvider != null) testScopeItemProvider.dispose();
		if (unitTestScopeItemProvider != null) unitTestScopeItemProvider.dispose();
		if (e2ETestScopeItemProvider != null) e2ETestScopeItemProvider.dispose();
		if (csvFileItemProvider != null) csvFileItemProvider.dispose();
	}

}
