/**
 */
package org.eclipse.efbt.openregspecs.model.data_definition.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.openregspecs.model.data_definition.util.Data_definitionAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Data_definitionItemProviderAdapterFactory extends Data_definitionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Data_definitionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.COMBINATION} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected COMBINATIONItemProvider combinationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.COMBINATION}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCOMBINATIONAdapter() {
		if (combinationItemProvider == null) {
			combinationItemProvider = new COMBINATIONItemProvider(this);
		}

		return combinationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.COMBINATION_ITEM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected COMBINATION_ITEMItemProvider combinatioN_ITEMItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.COMBINATION_ITEM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCOMBINATION_ITEMAdapter() {
		if (combinatioN_ITEMItemProvider == null) {
			combinatioN_ITEMItemProvider = new COMBINATION_ITEMItemProvider(this);
		}

		return combinatioN_ITEMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBEItemProvider cubeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBEAdapter() {
		if (cubeItemProvider == null) {
			cubeItemProvider = new CUBEItemProvider(this);
		}

		return cubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_GROUP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_GROUPItemProvider cubE_GROUPItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_GROUP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_GROUPAdapter() {
		if (cubE_GROUPItemProvider == null) {
			cubE_GROUPItemProvider = new CUBE_GROUPItemProvider(this);
		}

		return cubE_GROUPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_GROUP_ENUMERATION} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_GROUP_ENUMERATIONItemProvider cubE_GROUP_ENUMERATIONItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_GROUP_ENUMERATION}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_GROUP_ENUMERATIONAdapter() {
		if (cubE_GROUP_ENUMERATIONItemProvider == null) {
			cubE_GROUP_ENUMERATIONItemProvider = new CUBE_GROUP_ENUMERATIONItemProvider(this);
		}

		return cubE_GROUP_ENUMERATIONItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_HIERARCHY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_HIERARCHYItemProvider cubE_HIERARCHYItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_HIERARCHY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_HIERARCHYAdapter() {
		if (cubE_HIERARCHYItemProvider == null) {
			cubE_HIERARCHYItemProvider = new CUBE_HIERARCHYItemProvider(this);
		}

		return cubE_HIERARCHYItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_HIERARCHY_NODE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_HIERARCHY_NODEItemProvider cubE_HIERARCHY_NODEItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_HIERARCHY_NODE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_HIERARCHY_NODEAdapter() {
		if (cubE_HIERARCHY_NODEItemProvider == null) {
			cubE_HIERARCHY_NODEItemProvider = new CUBE_HIERARCHY_NODEItemProvider(this);
		}

		return cubE_HIERARCHY_NODEItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_RELATIONSHIP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_RELATIONSHIPItemProvider cubE_RELATIONSHIPItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_RELATIONSHIP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_RELATIONSHIPAdapter() {
		if (cubE_RELATIONSHIPItemProvider == null) {
			cubE_RELATIONSHIPItemProvider = new CUBE_RELATIONSHIPItemProvider(this);
		}

		return cubE_RELATIONSHIPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_STRUCTURE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_STRUCTUREItemProvider cubE_STRUCTUREItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_STRUCTURE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_STRUCTUREAdapter() {
		if (cubE_STRUCTUREItemProvider == null) {
			cubE_STRUCTUREItemProvider = new CUBE_STRUCTUREItemProvider(this);
		}

		return cubE_STRUCTUREItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_STRUCTURE_ITEM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_STRUCTURE_ITEMItemProvider cubE_STRUCTURE_ITEMItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_STRUCTURE_ITEM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_STRUCTURE_ITEMAdapter() {
		if (cubE_STRUCTURE_ITEMItemProvider == null) {
			cubE_STRUCTURE_ITEMItemProvider = new CUBE_STRUCTURE_ITEMItemProvider(this);
		}

		return cubE_STRUCTURE_ITEMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_TO_COMBINATION} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CUBE_TO_COMBINATIONItemProvider cubE_TO_COMBINATIONItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.CUBE_TO_COMBINATION}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCUBE_TO_COMBINATIONAdapter() {
		if (cubE_TO_COMBINATIONItemProvider == null) {
			cubE_TO_COMBINATIONItemProvider = new CUBE_TO_COMBINATIONItemProvider(this);
		}

		return cubE_TO_COMBINATIONItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.FRAMEWORK} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FRAMEWORKItemProvider frameworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.FRAMEWORK}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFRAMEWORKAdapter() {
		if (frameworkItemProvider == null) {
			frameworkItemProvider = new FRAMEWORKItemProvider(this);
		}

		return frameworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.FRAMEWORK_SUBDOMAIN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FRAMEWORK_SUBDOMAINItemProvider frameworK_SUBDOMAINItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.FRAMEWORK_SUBDOMAIN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFRAMEWORK_SUBDOMAINAdapter() {
		if (frameworK_SUBDOMAINItemProvider == null) {
			frameworK_SUBDOMAINItemProvider = new FRAMEWORK_SUBDOMAINItemProvider(this);
		}

		return frameworK_SUBDOMAINItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.data_definition.FRAMEWORK_VARIABLE_SET} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FRAMEWORK_VARIABLE_SETItemProvider frameworK_VARIABLE_SETItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.data_definition.FRAMEWORK_VARIABLE_SET}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFRAMEWORK_VARIABLE_SETAdapter() {
		if (frameworK_VARIABLE_SETItemProvider == null) {
			frameworK_VARIABLE_SETItemProvider = new FRAMEWORK_VARIABLE_SETItemProvider(this);
		}

		return frameworK_VARIABLE_SETItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (combinationItemProvider != null) combinationItemProvider.dispose();
		if (combinatioN_ITEMItemProvider != null) combinatioN_ITEMItemProvider.dispose();
		if (cubeItemProvider != null) cubeItemProvider.dispose();
		if (cubE_GROUPItemProvider != null) cubE_GROUPItemProvider.dispose();
		if (cubE_GROUP_ENUMERATIONItemProvider != null) cubE_GROUP_ENUMERATIONItemProvider.dispose();
		if (cubE_HIERARCHYItemProvider != null) cubE_HIERARCHYItemProvider.dispose();
		if (cubE_HIERARCHY_NODEItemProvider != null) cubE_HIERARCHY_NODEItemProvider.dispose();
		if (cubE_RELATIONSHIPItemProvider != null) cubE_RELATIONSHIPItemProvider.dispose();
		if (cubE_STRUCTUREItemProvider != null) cubE_STRUCTUREItemProvider.dispose();
		if (cubE_STRUCTURE_ITEMItemProvider != null) cubE_STRUCTURE_ITEMItemProvider.dispose();
		if (cubE_TO_COMBINATIONItemProvider != null) cubE_TO_COMBINATIONItemProvider.dispose();
		if (frameworkItemProvider != null) frameworkItemProvider.dispose();
		if (frameworK_SUBDOMAINItemProvider != null) frameworK_SUBDOMAINItemProvider.dispose();
		if (frameworK_VARIABLE_SETItemProvider != null) frameworK_VARIABLE_SETItemProvider.dispose();
	}

}
