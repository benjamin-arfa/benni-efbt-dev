/**
 */
package org.eclipse.efbt.openregspecs.model.requirements_text.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.efbt.openregspecs.model.requirements_text.util.Requirements_textAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Requirements_textItemProviderAdapterFactory extends Requirements_textAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Requirements_textItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.AllowedTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllowedTypesItemProvider allowedTypesItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.AllowedTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllowedTypesAdapter() {
		if (allowedTypesItemProvider == null) {
			allowedTypesItemProvider = new AllowedTypesItemProvider(this);
		}

		return allowedTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementsModuleItemProvider requirementsModuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementsModuleAdapter() {
		if (requirementsModuleItemProvider == null) {
			requirementsModuleItemProvider = new RequirementsModuleItemProvider(this);
		}

		return requirementsModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionImage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementsSectionImageItemProvider requirementsSectionImageItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionImage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementsSectionImageAdapter() {
		if (requirementsSectionImageItemProvider == null) {
			requirementsSectionImageItemProvider = new RequirementsSectionImageItemProvider(this);
		}

		return requirementsSectionImageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionLinkWithText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementsSectionLinkWithTextItemProvider requirementsSectionLinkWithTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionLinkWithText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementsSectionLinkWithTextAdapter() {
		if (requirementsSectionLinkWithTextItemProvider == null) {
			requirementsSectionLinkWithTextItemProvider = new RequirementsSectionLinkWithTextItemProvider(this);
		}

		return requirementsSectionLinkWithTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementsSectionTextItemProvider requirementsSectionTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementsSectionTextAdapter() {
		if (requirementsSectionTextItemProvider == null) {
			requirementsSectionTextItemProvider = new RequirementsSectionTextItemProvider(this);
		}

		return requirementsSectionTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementTypeItemProvider requirementTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.RequirementType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementTypeAdapter() {
		if (requirementTypeItemProvider == null) {
			requirementTypeItemProvider = new RequirementTypeItemProvider(this);
		}

		return requirementTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.TitledRequirementsSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitledRequirementsSectionItemProvider titledRequirementsSectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.TitledRequirementsSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitledRequirementsSectionAdapter() {
		if (titledRequirementsSectionItemProvider == null) {
			titledRequirementsSectionItemProvider = new TitledRequirementsSectionItemProvider(this);
		}

		return titledRequirementsSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.efbt.openregspecs.model.requirements_text.TagGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagGroupItemProvider tagGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.efbt.openregspecs.model.requirements_text.TagGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagGroupAdapter() {
		if (tagGroupItemProvider == null) {
			tagGroupItemProvider = new TagGroupItemProvider(this);
		}

		return tagGroupItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (allowedTypesItemProvider != null) allowedTypesItemProvider.dispose();
		if (requirementsModuleItemProvider != null) requirementsModuleItemProvider.dispose();
		if (requirementsSectionImageItemProvider != null) requirementsSectionImageItemProvider.dispose();
		if (requirementsSectionLinkWithTextItemProvider != null) requirementsSectionLinkWithTextItemProvider.dispose();
		if (requirementsSectionTextItemProvider != null) requirementsSectionTextItemProvider.dispose();
		if (requirementTypeItemProvider != null) requirementTypeItemProvider.dispose();
		if (titledRequirementsSectionItemProvider != null) titledRequirementsSectionItemProvider.dispose();
		if (tagItemProvider != null) tagItemProvider.dispose();
		if (tagGroupItemProvider != null) tagGroupItemProvider.dispose();
	}

}
