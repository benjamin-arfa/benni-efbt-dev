// automatically generated by Xtext
grammar org.eclipse.efbt.openregspecs.dsl.OpenRegSpecs with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/open_reg_specs" as open_reg_specs

OpenRegSpecs returns open_reg_specs::OpenRegSpecs:
	{open_reg_specs::OpenRegSpecs}
	'OpenRegSpecs'
	name=EString
	'{'
		('requirements' '{' requirements+=RequirementsModule ( "," requirements+=RequirementsModule)* '}' )?
		('data_model' '{' data_model+=DataModel ( "," data_model+=DataModel)* '}' )?
		('process_workflow' '{' process_workflow+=WorkflowModule ( "," process_workflow+=WorkflowModule)* '}' )?
		('report_generation' '{' report_generation+=ViewModule ( "," report_generation+=ViewModule)* '}' )?
		('tests' '{' tests+=TestModule ( "," tests+=TestModule)* '}' )?
	'}';



XClassifier returns open_reg_specs::XClassifier:
	XClass | XDataType_Impl | XEnum;


XMember returns open_reg_specs::XMember:
	XAttribute | XOperation | XReference;



FlowNode returns open_reg_specs::FlowNode:
	Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;

FlowElement returns open_reg_specs::FlowElement:
	SequenceFlow | Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;


RequirementsSection returns open_reg_specs::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;



Module returns open_reg_specs::Module:
	Module_Impl | RequirementsModule | TagGroup | ViewModule | TestModule | PlatformCallModule | WorkflowModule;

Tag returns open_reg_specs::Tag:
	Tag_Impl | ActivityTag | ScenarioTag;

PlatformCall returns open_reg_specs::PlatformCall:
	PlatformCall_Impl ;

Activity returns open_reg_specs::Activity:
	Task_Impl | ServiceTask | SubProcess | ScriptTask | UserTask;



SelectColumn returns open_reg_specs::SelectColumn:
	SelectColumn_Impl | SelectColumnMemberAs | SelectColumnAttributeAs;


TestScope returns open_reg_specs::TestScope:
	TestScope_Impl | OpenRegSpecs | UnitTestScope | E2ETestScope_Impl;

EString returns ecore::EString:
	STRING | ID;

Scenario returns open_reg_specs::Scenario:
	{open_reg_specs::Scenario}
	(invisible?='invisible')?
	'Scenario'
	name=EString
	'{'
		('description' description=EString)?
		('requiredAttributes' '(' requiredAttributes+=[open_reg_specs::XMember|EString] ( "," requiredAttributes+=[open_reg_specs::XMember|EString])* ')' )?
		('data_constraints' data_constraints=DataConstraint)?
	'}';
	
	

SelectionLayer returns open_reg_specs::SelectionLayer:
	{open_reg_specs::SelectionLayer}
	(invisible?='invisible')?
	'SelectionLayer'
	name=EString
	'{'
		('generatedEntity' generatedEntity=[open_reg_specs::XClass|EString])?
	'}';



RequirementsModule returns open_reg_specs::RequirementsModule:
	{open_reg_specs::RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

DataModel returns open_reg_specs::DataModel:
	{open_reg_specs::DataModel}
	'DataModel'
	'{'
		( package=XPackage)?
	'}';

WorkflowModule returns open_reg_specs::WorkflowModule:
	{open_reg_specs::WorkflowModule}
	'WorkflowModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('taskTags' '{' taskTags+=ActivityTag ( "," taskTags+=ActivityTag)* '}' )?
		('scenarioTags' '{' scenarioTags+=ScenarioTag ( "," scenarioTags+=ScenarioTag)* '}' )?
		('subProcess' '{' subProcess+=SubProcess ( "," subProcess+=SubProcess)* '}' )?
	'}';

ViewModule returns open_reg_specs::ViewModule:
	{open_reg_specs::ViewModule}
	'ViewModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('views' '{' views+=View ( "," views+=View)* '}' )?
	'}';

TestModule returns open_reg_specs::TestModule:
	{open_reg_specs::TestModule}
	'TestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=Test ( "," tests+=Test)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

XAttribute returns open_reg_specs::XAttribute:
	{open_reg_specs::XAttribute}
	(iD?='iD')?
	type=[open_reg_specs::XClassifier|EString] ("["(  lowerBound=EInt) ".." ( upperBound=EInt) "]")?
	name=ID 
	;

DataConstraint returns open_reg_specs::DataConstraint:
	{open_reg_specs::DataConstraint}
	'conditional'

		( attr1=[open_reg_specs::XAttribute|EString])?
		( comparison=AttrComparison)?
		('member' member=[open_reg_specs::XEnumLiteral|EString])?
		('value' value=EString)?
	;


XClass returns open_reg_specs::XClass:
	{open_reg_specs::XClass}
	((abstract?='abstract'? 'class') ) name = ID
	('extends' superTypes+=[open_reg_specs::XClass|EString] (',' superTypes+=[open_reg_specs::XClass|EString])*)?
	'{'
	   (members+=XMember)*
	'}'
	;

XDataType_Impl returns open_reg_specs::XDataType:
	{open_reg_specs::XDataType}
	'type' name = ID
	(
	  ('create' createBody=XFunction)? &
	  ('convert' convertBody=XFunction)?
	)
	;

XEnum returns open_reg_specs::XEnum:
	{open_reg_specs::XEnum}
	'enum' name = ID
	'{'
	  (literals+=XEnumLiteral ((',')? literals+=XEnumLiteral)*)?
	'}';

XOperation returns open_reg_specs::XOperation:
	{open_reg_specs::XOperation}
	'op'
	type=[open_reg_specs::XClassifier|EString] ("["(  lowerBound=EInt) ".." ( upperBound=EInt) "]")?
	name=ID
	'(' (parameters+=XParameter (',' parameters+=XParameter)*)? ')'
	(body=XFunction)?
	;

XReference returns open_reg_specs::XReference:
	{open_reg_specs::XReference}
	((containment?='contains' ) |
	 ('refers') 
	)
	type=[open_reg_specs::XClassifier|EString] ("["(  lowerBound=EInt) ".." ( upperBound=EInt) "]")?
	name=ID
	;

XParameter returns open_reg_specs::XParameter:
	{open_reg_specs::XParameter}
	type=[open_reg_specs::XClassifier|EString] ("["(  lowerBound=EInt) ".." ( upperBound=EInt) "]")?
	name=ID;

XFunction returns open_reg_specs::XFunction:
	{open_reg_specs::XFunction}
	'function' functionName = ID '()';

XEnumLiteral returns open_reg_specs::XEnumLiteral:
	{open_reg_specs::XEnumLiteral}
	name=ID
    ('as' literal=STRING)?
    ('=' value=EInt)?
    ;

EInt returns ecore::EInt:
	'-'? INT;


QualifiedName:
	ValidID (=>'.' ValidID)*;
	
ValidID:
	ID;

enum AttrComparison returns open_reg_specs::AttrComparison:
				equals = 'equals' | less_than = 'less_than' | greater_than = 'greater_than' | not_equals = 'not_equals';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

	
SequenceFlow returns open_reg_specs::SequenceFlow:
	{open_reg_specs::SequenceFlow}
	(invisible?='invisible')?
	'SequenceFlow'
	name=EString
		('from' sourceRef=[open_reg_specs::FlowNode|EString])?
		('to' targetRef=[open_reg_specs::FlowNode|EString])?
		('description' description=EString)?
	;

Task_Impl returns open_reg_specs::Task:
	{open_reg_specs::Task}
	(invisible?='invisible')?
	'Task'
	name=EString
		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('description' description=EString)?
	;
	
ExclusiveGateway returns open_reg_specs::ExclusiveGateway:
	{open_reg_specs::ExclusiveGateway}
	(invisible?='invisible')?
	'ExclusiveGateway'
	name=EString
		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('description' description=EString)?
;

InclusiveGateway returns open_reg_specs::InclusiveGateway:
	{open_reg_specs::InclusiveGateway}
	(invisible?='invisible')?
	'InclusiveGateway'
	name=EString
	('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
	('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
	('description' description=EString)?
;

ParallelGateway returns open_reg_specs::ParallelGateway:
	{open_reg_specs::ParallelGateway}
	(invisible?='invisible')?
	'ParallelGateway'
	name=EString
		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('description' description=EString)?

;

ServiceTask returns open_reg_specs::ServiceTask:
	{open_reg_specs::ServiceTask}
	(invisible?='invisible')?
	'ServiceTask'
	name=EString
		
		
		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('enrichedAttribute' enrichedAttribute=[open_reg_specs::XAttribute|EString])?
		('secondAttribute' secondAttribute=[open_reg_specs::XAttribute|EString])?
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
		('description' description=EString)?
	'}';
	
	
SubProcess returns open_reg_specs::SubProcess:
	{open_reg_specs::SubProcess}
	(invisible?='invisible')?
	'SubProcess'
	name=EString
		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('flowElements' '{' flowElements+=FlowElement ( "," flowElements+=FlowElement)* '}' )?
		('description' description=EString)?
		;
	
ScriptTask returns open_reg_specs::ScriptTask:
	{open_reg_specs::ScriptTask}
	(invisible?='invisible')?
	'ScriptTask'
	name=EString
		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('outputLayer' outputLayer=[open_reg_specs::XClass|EString])?
		('selectionLayers' '{' selectionLayers+=SelectionLayer ( "," selectionLayers+=SelectionLayer)* '}' )?
		('description' description=EString)?
;

UserTask returns open_reg_specs::UserTask:
	{open_reg_specs::UserTask}
	(invisible?='invisible')?
	'UserTask'
	name=EString

		('outgoing' '(' outgoing+=[open_reg_specs::SequenceFlow|EString] ( "," outgoing+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[open_reg_specs::SequenceFlow|EString] ( "," incoming+=[open_reg_specs::SequenceFlow|EString])* ')' )?
		('entity' entity=[open_reg_specs::XClass|EString])?
		('description' description=EString)?
;


ModuleDependencies returns open_reg_specs::ModuleDependencies:
	{open_reg_specs::ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

ModuleLongName returns open_reg_specs::ModuleLongName:
	{open_reg_specs::ModuleLongName}
	'ModuleLongName'
	name=EString;

TitledRequirementsSection returns open_reg_specs::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[open_reg_specs::RequirementsSectionLinkWithText|EString])?
		'requirementsType' requirementsType=[open_reg_specs::RequirementType|EString]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';
	


AllowedTypes returns open_reg_specs::AllowedTypes:
	{open_reg_specs::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

ModuleDependency returns open_reg_specs::ModuleDependency:
	{open_reg_specs::ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[open_reg_specs::Module|EString])?
		('longName' longName=[open_reg_specs::ModuleLongName|EString])?
	'}';

Module_Impl returns open_reg_specs::Module:
	{open_reg_specs::Module}
	'Module'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

TagGroup returns open_reg_specs::TagGroup:
	{open_reg_specs::TagGroup}
	'TagGroup'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tags' '{' tags+=Tag ( "," tags+=Tag)* '}' )?
	'}';

PlatformCallModule returns open_reg_specs::PlatformCallModule:
	{open_reg_specs::PlatformCallModule}
	'PlatformCallModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('platformCalls' '{' platformCalls+=PlatformCall ( "," platformCalls+=PlatformCall)* '}' )?
	'}';

Tag_Impl returns open_reg_specs::Tag:
	{open_reg_specs::Tag}
	'Tag'
	name=EString
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[open_reg_specs::TitledRequirementsSection|EString] ( "," requirements+=[open_reg_specs::TitledRequirementsSection|EString])* ')' )?
	'}';

ActivityTag returns open_reg_specs::ActivityTag:
	{open_reg_specs::ActivityTag}
	'ActivityTag'
	name=EString
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[open_reg_specs::TitledRequirementsSection|EString] ( "," requirements+=[open_reg_specs::TitledRequirementsSection|EString])* ')' )?
		('activity' activity=[open_reg_specs::Activity|EString])?
	'}';

ScenarioTag returns open_reg_specs::ScenarioTag:
	{open_reg_specs::ScenarioTag}
	'ScenarioTag'
	name=EString
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[open_reg_specs::TitledRequirementsSection|EString] ( "," requirements+=[open_reg_specs::TitledRequirementsSection|EString])* ')' )?
		('scenario' scenario=[open_reg_specs::Scenario|EString])?
	'}';

PlatformCall_Impl returns open_reg_specs::PlatformCall:
	{open_reg_specs::PlatformCall}
	'PlatformCall'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
	'}';


RequirementsSectionLinkWithText returns open_reg_specs::RequirementsSectionLinkWithText:
	{open_reg_specs::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[open_reg_specs::TitledRequirementsSection|EString])?
	'}';

RequirementType returns open_reg_specs::RequirementType:
	{open_reg_specs::RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns open_reg_specs::RequirementsSectionImage:
	{open_reg_specs::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns open_reg_specs::RequirementsSectionText:
	{open_reg_specs::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

XPackage returns open_reg_specs::XPackage:
	{open_reg_specs::XPackage}
	'package'
	name = QualifiedName
	(classifiers += XClassifier)*
	;

	
View returns open_reg_specs::View:
	{open_reg_specs::View}
	'View'
	name=EString
		('select' selectClause=SelectClause)?
		('where' whereClause=WhereClause)?
		('selectionLayer' selectionLayer=[open_reg_specs::SelectionLayer|EString])?
	;

SelectClause returns open_reg_specs::SelectClause:
	{open_reg_specs::SelectClause}
	'SelectClause'
	'{'
		('columns' '{' columns+=SelectColumn ( "," columns+=SelectColumn)* '}' )?
	'}';
	
	
WhereClause returns open_reg_specs::WhereClause:
	{open_reg_specs::WhereClause}
	'condition'

		( attribute1=[open_reg_specs::XAttribute|EString])?
		( comparitor=Comparitor)?
		('member' member=[open_reg_specs::XEnumLiteral|EString])?
		('value' value=EString)?
;

SelectColumn_Impl returns open_reg_specs::SelectColumn:
	{open_reg_specs::SelectColumn}
	'SelectColumn'
	'{'
		('as' ^as=[open_reg_specs::XAttribute|EString])?
	'}';
	
	
SelectColumnMemberAs returns open_reg_specs::SelectColumnMemberAs:
	{open_reg_specs::SelectColumnMemberAs}
	'SelectColumnMember'
		( memberAsConstant=[open_reg_specs::XEnumLiteral|EString])?
		('as' ^as=[open_reg_specs::XAttribute|EString])?
		;
	
SelectColumnAttributeAs returns open_reg_specs::SelectColumnAttributeAs:
	{open_reg_specs::SelectColumnAttributeAs}
	'SelectColumnAttribute'
		( attribute=[open_reg_specs::XAttribute|EString])?
		('as' ^as=[open_reg_specs::XAttribute|EString])?
	;
	

enum Comparitor returns open_reg_specs::Comparitor:
				less_than = 'less_than' | equals = 'equals' | greater_than = 'greater_than';

Test returns open_reg_specs::Test:
	{open_reg_specs::Test}
	'Test'
	name=EString
	'{'
		('inputData' '{' inputData+=InputFile ( "," inputData+=InputFile)* '}' )?
		('expectedResult' '{' expectedResult+=InputFile ( "," expectedResult+=InputFile)* '}' )?
		('scope' scope=TestScope)?
	'}';

InputFile returns open_reg_specs::InputFile:
	{open_reg_specs::InputFile}
	'InputFile'
	'{'
		('fileName' fileName=EString)?
		('entity' entity=[open_reg_specs::XClass|EString])?
	'}';

TestScope_Impl returns open_reg_specs::TestScope:
	{open_reg_specs::TestScope}
	'TestScope'
	name=EString;

UnitTestScope returns open_reg_specs::UnitTestScope:
	{open_reg_specs::UnitTestScope}
	'UnitTestScope'
	name=EString
	'{'
		('scenarios' scenarios=[open_reg_specs::Scenario|EString])?
	'}';

E2ETestScope_Impl returns open_reg_specs::E2ETestScope:
	{open_reg_specs::E2ETestScope}
	'E2ETestScope'
	name=EString
	'{'
		('scenarios' '(' scenarios+=[open_reg_specs::Scenario|EString] ( "," scenarios+=[open_reg_specs::Scenario|EString])* ')' )?
		('layer' layer=[open_reg_specs::SelectionLayer|EString])?
		('scriptTask' scriptTask=[open_reg_specs::ScriptTask|EString])?
	'}';

	