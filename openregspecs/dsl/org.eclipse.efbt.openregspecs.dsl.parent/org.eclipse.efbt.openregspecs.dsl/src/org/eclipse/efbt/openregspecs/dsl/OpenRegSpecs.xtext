// automatically generated by Xtext
grammar org.eclipse.efbt.openregspecs.dsl.OpenRegSpecs with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/efbt/open_reg_specs" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

OpenRegSpecs returns OpenRegSpecs:
	{OpenRegSpecs}
	'OpenRegSpecs'
	'{'
		('requirements' '{' requirements+=RequirementsModule ( "," requirements+=RequirementsModule)* '}' )?
		('types_and_concepts' types_and_concepts=SMCubesCoreModel)?
		('data_model' '{' data_model+=EntityModule ( "," data_model+=EntityModule)* '}' )?
		('process_workflow' '{' process_workflow+=SubProcess ( "," process_workflow+=SubProcess)* '}' )?
		('report_generation' '{' report_generation+=SQLEntityModule ( "," report_generation+=SQLEntityModule)* '}' )?
		('tests' '{' tests+=TestModule ( "," tests+=TestModule)* '}' )?
	'}';
















Entity returns Entity:
	GeneratedEntity | DerivedEntity | BasicEntity;


FlowElement returns FlowElement:
	SequenceFlow | Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;

SQLEntity returns SQLEntity:
	SQLEntity_Impl | View | Table;



RequirementsSection returns RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;



Module returns Module:
	Module_Impl | EntityModule | RequirementsModule | TagGroup | SQLEntityModule | GeneratedEntitySQLModule | LogicalTransformationModule | TestModule | DomainModule | MemberHierarchyModule | MemberModule | VariableModule | SubDomainModule | PlatformCallModule;

Tag returns Tag:
	Tag_Impl | ActivityTag | ScenarioTag;











PlatformCall returns PlatformCall:
	PlatformCall_Impl | ImportBIRDFromMSAccess | CreateLogicalTransformationViewForScope | ConvertDataMetaModelToEcore;

Activity returns Activity:
	Task_Impl | ServiceTask | SubProcess | ScriptTask | UserTask;


FlowNode returns FlowNode:
	Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;

Attribute returns Attribute:
	Attribute_Impl | RelationshipAttribute_Impl | OneToOneRelationshipAttribute | ManyToOneRelationshipAttribute | OneToManyRelationshipAttribute | ManyToManyRelationshipAttribute;



Type returns Type:
	SUBDOMAIN;

Concept returns Concept:
	Concept_Impl | VARIABLE;










EnumMember returns EnumMember:
	EnumMember_Impl | MEMBER;





TestScope returns TestScope:
	TestScope_Impl | UnitTestScope | E2ETestScope;

RequirementsModule returns RequirementsModule:
	{RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

SMCubesCoreModel returns SMCubesCoreModel:
	{SMCubesCoreModel}
	'SMCubesCoreModel'
	name=EString
	'{'
		('variableModules' '{' variableModules+=VariableModule ( "," variableModules+=VariableModule)* '}' )?
		('domainModules' '{' domainModules+=DomainModule ( "," domainModules+=DomainModule)* '}' )?
		('memberModules' '{' memberModules+=MemberModule ( "," memberModules+=MemberModule)* '}' )?
		('subDomainModules' '{' subDomainModules+=SubDomainModule ( "," subDomainModules+=SubDomainModule)* '}' )?
		('memberHierarchyModules' '{' memberHierarchyModules+=MemberHierarchyModule ( "," memberHierarchyModules+=MemberHierarchyModule)* '}' )?
	'}';

EntityModule returns EntityModule:
	{EntityModule}
	'EntityModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('entities' '{' entities+=Entity ( "," entities+=Entity)* '}' )?
	'}';

SubProcess returns SubProcess:
	{SubProcess}
	(invisible?='invisible')?
	'SubProcess'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('flowElements' '{' flowElements+=FlowElement ( "," flowElements+=FlowElement)* '}' )?
	'}';

SQLEntityModule returns SQLEntityModule:
	{SQLEntityModule}
	'SQLEntityModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('sqlEntities' '{' sqlEntities+=SQLEntity ( "," sqlEntities+=SQLEntity)* '}' )?
	'}';

TestModule returns TestModule:
	{TestModule}
	'TestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=Test ( "," tests+=Test)* '}' )?
	'}';

ModuleDependencies returns ModuleDependencies:
	{ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ModuleLongName returns ModuleLongName:
	{ModuleLongName}
	'ModuleLongName'
	name=EString;

TitledRequirementsSection returns TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[RequirementsSectionLinkWithText|EString])?
		'requirementsType' requirementsType=[RequirementType|EString]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';

AllowedTypes returns AllowedTypes:
	{AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

ModuleDependency returns ModuleDependency:
	{ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[Module|EString])?
		('longName' longName=[ModuleLongName|EString])?
	'}';

Module_Impl returns Module:
	{Module}
	'Module'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

TagGroup returns TagGroup:
	{TagGroup}
	'TagGroup'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tags' '{' tags+=Tag ( "," tags+=Tag)* '}' )?
	'}';

GeneratedEntitySQLModule returns GeneratedEntitySQLModule:
	{GeneratedEntitySQLModule}
	'GeneratedEntitySQLModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('GeneratedEntitySQLs' '{' GeneratedEntitySQLs+=GeneratedEntitySQL ( "," GeneratedEntitySQLs+=GeneratedEntitySQL)* '}' )?
	'}';

LogicalTransformationModule returns LogicalTransformationModule:
	{LogicalTransformationModule}
	'LogicalTransformationModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('testModules' '(' testModules+=[TestModule|EString] ( "," testModules+=[TestModule|EString])* ')' )?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('taskTags' '{' taskTags+=ActivityTag ( "," taskTags+=ActivityTag)* '}' )?
		('scenarioTags' '{' scenarioTags+=ScenarioTag ( "," scenarioTags+=ScenarioTag)* '}' )?
		('subProcess' subProcess=SubProcess)?
		('requirements' '{' requirements+=RequirementsModule ( "," requirements+=RequirementsModule)* '}' )?
		('selectionLayers' '{' selectionLayers+=SelectionLayer ( "," selectionLayers+=SelectionLayer)* '}' )?
	'}';

DomainModule returns DomainModule:
	{DomainModule}
	'DomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('domains' '{' domains+=DOMAIN ( "," domains+=DOMAIN)* '}' )?
	'}';

MemberHierarchyModule returns MemberHierarchyModule:
	{MemberHierarchyModule}
	'MemberHierarchyModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('memberHierarchies' '{' memberHierarchies+=MEMBER_HIERARCHY ( "," memberHierarchies+=MEMBER_HIERARCHY)* '}' )?
		('memberHierarchiesNodes' '{' memberHierarchiesNodes+=MEMBER_HIERARCHY_NODE ( "," memberHierarchiesNodes+=MEMBER_HIERARCHY_NODE)* '}' )?
	'}';

MemberModule returns MemberModule:
	{MemberModule}
	'MemberModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('members' '{' members+=MEMBER ( "," members+=MEMBER)* '}' )?
	'}';

VariableModule returns VariableModule:
	{VariableModule}
	'VariableModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('variables' '{' variables+=VARIABLE ( "," variables+=VARIABLE)* '}' )?
	'}';

SubDomainModule returns SubDomainModule:
	{SubDomainModule}
	'SubDomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('subdomains' '{' subdomains+=SUBDOMAIN ( "," subdomains+=SUBDOMAIN)* '}' )?
	'}';

PlatformCallModule returns PlatformCallModule:
	{PlatformCallModule}
	'PlatformCallModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('platformCalls' '{' platformCalls+=PlatformCall ( "," platformCalls+=PlatformCall)* '}' )?
	'}';

Tag_Impl returns Tag:
	{Tag}
	'Tag'
	name=EString
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[TitledRequirementsSection|EString] ( "," requirements+=[TitledRequirementsSection|EString])* ')' )?
	'}';

ActivityTag returns ActivityTag:
	{ActivityTag}
	'ActivityTag'
	name=EString
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[TitledRequirementsSection|EString] ( "," requirements+=[TitledRequirementsSection|EString])* ')' )?
		('activity' activity=[Activity|EString])?
	'}';

ScenarioTag returns ScenarioTag:
	{ScenarioTag}
	'ScenarioTag'
	name=EString
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[TitledRequirementsSection|EString] ( "," requirements+=[TitledRequirementsSection|EString])* ')' )?
		('scenario' scenario=[Scenario|EString])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

SequenceFlow returns SequenceFlow:
	{SequenceFlow}
	(invisible?='invisible')?
	'SequenceFlow'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('targetRef' targetRef=[FlowNode|EString])?
		('sourceRef' sourceRef=[FlowNode|EString])?
	'}';

Task_Impl returns Task:
	{Task}
	(invisible?='invisible')?
	'Task'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

ServiceTask returns ServiceTask:
	{ServiceTask}
	(invisible?='invisible')?
	'ServiceTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('enrichedAttribute' enrichedAttribute=[Attribute|EString])?
		('secondAttribute' secondAttribute=[Attribute|EString])?
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

ScriptTask returns ScriptTask:
	{ScriptTask}
	(invisible?='invisible')?
	'ScriptTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('outputLayer' outputLayer=[GeneratedEntity|EString])?
		('selectionLayers' '{' selectionLayers+=SelectionLayer ( "," selectionLayers+=SelectionLayer)* '}' )?
	'}';

UserTask returns UserTask:
	{UserTask}
	(invisible?='invisible')?
	'UserTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('entity' entity=[BasicEntity|EString])?
	'}';

ExclusiveGateway returns ExclusiveGateway:
	{ExclusiveGateway}
	(invisible?='invisible')?
	'ExclusiveGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

InclusiveGateway returns InclusiveGateway:
	{InclusiveGateway}
	(invisible?='invisible')?
	'InclusiveGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

ParallelGateway returns ParallelGateway:
	{ParallelGateway}
	(invisible?='invisible')?
	'ParallelGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

Attribute_Impl returns Attribute:
	{Attribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	'Attribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
	'}';

Scenario returns Scenario:
	{Scenario}
	(invisible?='invisible')?
	'Scenario'
	name=EString
	'{'
		('description' description=EString)?
		('requiredAttributes' '(' requiredAttributes+=[Attribute|EString] ( "," requiredAttributes+=[Attribute|EString])* ')' )?
		('data_constraints' data_constraints=DataConstraint)?
	'}';

Concept_Impl returns Concept:
	{Concept}
	'Concept'
	'{'
		('conceptName' conceptName=EString)?
	'}';

RelationshipAttribute_Impl returns RelationshipAttribute:
	{RelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'RelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

OneToOneRelationshipAttribute returns OneToOneRelationshipAttribute:
	{OneToOneRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'OneToOneRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

ManyToOneRelationshipAttribute returns ManyToOneRelationshipAttribute:
	{ManyToOneRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'ManyToOneRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

OneToManyRelationshipAttribute returns OneToManyRelationshipAttribute:
	{OneToManyRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'OneToManyRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

ManyToManyRelationshipAttribute returns ManyToManyRelationshipAttribute:
	{ManyToManyRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'ManyToManyRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

SUBDOMAIN returns SUBDOMAIN:
	{SUBDOMAIN}
	(is_listed?='is_listed')?
	(is_natural?='is_natural')?
	'SUBDOMAIN'
	subdomain_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('description' description=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('facet_id' facet_id=[FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
		('items' '{' items+=SUBDOMAIN_ENUMERATION ( "," items+=SUBDOMAIN_ENUMERATION)* '}' )?
	'}';

DOMAIN returns DOMAIN:
	{DOMAIN}
	(is_enumerated?='is_enumerated')?
	(is_reference?='is_reference')?
	'DOMAIN'
	name=EString
	'{'
		('code' code=EString)?
		('data_type' data_type=FACET_VALUE_TYPE)?
		('description' description=EString)?
		('domain_id' domain_id=EString)?
		('displayName' displayName=EString)?
		('facet_id' facet_id=[FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

FACET_COLLECTION returns FACET_COLLECTION:
	{FACET_COLLECTION}
	'FACET_COLLECTION'
	facet_id=EString
	'{'
		('code' code=EString)?
		('facet_value_type' facet_value_type=FACET_VALUE_TYPE)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

MAINTENANCE_AGENCY returns MAINTENANCE_AGENCY:
	{MAINTENANCE_AGENCY}
	'MAINTENANCE_AGENCY'
	name=EString
	'{'
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
	'}';

SUBDOMAIN_ENUMERATION returns SUBDOMAIN_ENUMERATION:
	{SUBDOMAIN_ENUMERATION}
	'SUBDOMAIN_ENUMERATION'
	'{'
		('order' order=EInt)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('member_id' member_id=[MEMBER|EString])?
	'}';

enum FACET_VALUE_TYPE returns FACET_VALUE_TYPE:
				BigInteger = 'BigInteger' | Boolean = 'Boolean' | DateTime = 'DateTime' | DayMonthDayMonth = 'DayMonthDayMonth' | Decimal = 'Decimal' | Double = 'Double' | Duration = 'Duration' | Float = 'Float' | GregorianDay = 'GregorianDay' | GregorianMonth = 'GregorianMonth' | GregorianYear = 'GregorianYear' | Integer = 'Integer' | Long = 'Long' | Short = 'Short' | String = 'String' | Time = 'Time' | URI = 'URI';

MEMBER returns MEMBER:
	{MEMBER}
	'MEMBER'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_id' member_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

VARIABLE returns VARIABLE:
	{VARIABLE}
	'VARIABLE'
	name=EString
	'{'
		('conceptName' conceptName=EString)?
		('code' code=EString)?
		('description' description=EString)?
		('primary_concept' primary_concept=EString)?
		('variable_id' variable_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

GeneratedEntity returns GeneratedEntity:
	{GeneratedEntity}
	'GeneratedEntity'
	name=EString
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

DerivedEntity returns DerivedEntity:
	{DerivedEntity}
	'DerivedEntity'
	name=EString
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

BasicEntity returns BasicEntity:
	{BasicEntity}
	'BasicEntity'
	name=EString
	'{'
		('superClass' superClass=[BasicEntity|EString])?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

DataConstraint returns DataConstraint:
	{DataConstraint}
	'DataConstraint'
	'{'
		('comparison' comparison=AttrComparison)?
		('attr1' attr1=[Attribute|EString])?
		('attr2' attr2=[Attribute|EString])?
	'}';

enum AttrComparison returns AttrComparison:
				equals = 'equals' | less_than = 'less_than' | greater_than = 'greater_than';

SelectionLayer returns SelectionLayer:
	{SelectionLayer}
	(invisible?='invisible')?
	'SelectionLayer'
	name=EString
	'{'
		('generatedEntity' generatedEntity=[GeneratedEntity|EString])?
	'}';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

GeneratedEntitySQL returns GeneratedEntitySQL:
	{GeneratedEntitySQL}
	'GeneratedEntitySQL'
	'{'
		('generatedEntity' generatedEntity=[GeneratedEntity|EString])?
		('view' '(' view+=[View|EString] ( "," view+=[View|EString])* ')' )?
	'}';

View returns View:
	{View}
	'View'
	name=EString
	'{'
		('selectClause' selectClause=SelectClause)?
		('fromClause' fromClause=FromClause)?
		('whereClause' whereClause=WhereClause)?
	'}';

SelectClause returns SelectClause:
	{SelectClause}
	'SelectClause'
	'{'
		('columns' '{' columns+=SelectColumn ( "," columns+=SelectColumn)* '}' )?
	'}';

FromClause returns FromClause:
	{FromClause}
	'FromClause'
	'{'
		('sqlEntities' sqlEntities=[SQLEntity|EString])?
	'}';

WhereClause returns WhereClause:
	{WhereClause}
	'WhereClause'
	;

SelectColumn returns SelectColumn:
	{SelectColumn}
	'SelectColumn'
	'{'
		('attribute' attribute=[Attribute|EString])?
		('as' ^as=[Attribute|EString])?
		('memberAsConstant' memberAsConstant=[EnumMember|EString])?
	'}';

EnumMember_Impl returns EnumMember:
	{EnumMember}
	'EnumMember'
	;

SQLEntity_Impl returns SQLEntity:
	{SQLEntity}
	'SQLEntity'
	name=EString;

Table returns Table:
	{Table}
	'Table'
	name=EString
	'{'
		('entity' entity=[Entity|EString])?
	'}';

MEMBER_HIERARCHY returns MEMBER_HIERARCHY:
	{MEMBER_HIERARCHY}
	'MEMBER_HIERARCHY'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_hierarchy_id' member_hierarchy_id=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

MEMBER_HIERARCHY_NODE returns MEMBER_HIERARCHY_NODE:
	{MEMBER_HIERARCHY_NODE}
	'MEMBER_HIERARCHY_NODE'
	'{'
		('comparator' comparator=EString)?
		('level' level=EInt)?
		('operator' operator=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('member_hierarchy_id' member_hierarchy_id=[MEMBER_HIERARCHY|EString])?
		('member_id' member_id=[MEMBER|EString])?
		('parent_member_id' parent_member_id=[MEMBER|EString])?
	'}';

PlatformCall_Impl returns PlatformCall:
	{PlatformCall}
	'PlatformCall'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
	'}';

ImportBIRDFromMSAccess returns ImportBIRDFromMSAccess:
	{ImportBIRDFromMSAccess}
	'ImportBIRDFromMSAccess'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('inputDirectory' inputDirectory=EString)?
		('outputDirectory' outputDirectory=EString)?
	'}';

CreateLogicalTransformationViewForScope returns CreateLogicalTransformationViewForScope:
	{CreateLogicalTransformationViewForScope}
	'CreateLogicalTransformationViewForScope'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('logicalTransformationModule' logicalTransformationModule=[LogicalTransformationModule|EString])?
		('attributeLineage' '(' attributeLineage+=[Attribute|EString] ( "," attributeLineage+=[Attribute|EString])* ')' )?
		('testScope' '{' testScope+=E2ETestScope ( "," testScope+=E2ETestScope)* '}' )?
	'}';

ConvertDataMetaModelToEcore returns ConvertDataMetaModelToEcore:
	{ConvertDataMetaModelToEcore}
	'ConvertDataMetaModelToEcore'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('outputDirectory' outputDirectory=EString)?
		('entityModule' entityModule=[EntityModule|EString])?
	'}';

E2ETestScope returns E2ETestScope:
	{E2ETestScope}
	'E2ETestScope'
	name=EString
	'{'
		('scenarios' '(' scenarios+=[Scenario|EString] ( "," scenarios+=[Scenario|EString])* ')' )?
		('layer' layer=[SelectionLayer|EString])?
		('scriptTask' scriptTask=[ScriptTask|EString])?
	'}';

RequirementsSectionLinkWithText returns RequirementsSectionLinkWithText:
	{RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[TitledRequirementsSection|EString])?
	'}';

RequirementType returns RequirementType:
	{RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns RequirementsSectionImage:
	{RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns RequirementsSectionText:
	{RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

Test returns Test:
	{Test}
	'Test'
	name=EString
	'{'
		('scope' scope=TestScope)?
		('inputData' '{' inputData+=CSVFile ( "," inputData+=CSVFile)* '}' )?
		('expectedResult' '{' expectedResult+=CSVFile ( "," expectedResult+=CSVFile)* '}' )?	
	'}';

CSVFile returns CSVFile:
	{CSVFile}
	'CSVFile'
	'{'
		('fileName' fileName=EString)?
		('rows' '{' rows+=CSVRow ( "," rows+=CSVRow)* '}' )?
	'}';

TestScope_Impl returns TestScope:
	{TestScope}
	'TestScope'
	name=EString;

CSVRow returns CSVRow:
	{CSVRow}
	(isHeader?='isHeader')?
	'CSVRow'
	'{'
		('value' '{' value+=EString ( "," value+=EString)* '}' )?
	'}';

UnitTestScope returns UnitTestScope:
	{UnitTestScope}
	'UnitTestScope'
	name=EString
	'{'
		('scenarios' scenarios=[Scenario|EString])?
	'}';
