// automatically generated by Xtext
grammar org.eclipse.efbt.openregspecs.dsl.OpenRegSpecs with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/efbt/data_definition" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/core" as core
import "http://www.eclipse.org/efbt/open_reg_specs" as open_reg_specs
import "http://www.eclipse.org/efbt/requirements_text" as requirements_text
import "http://www.eclipse.org/efbt/openregspecs_smcubes_core_extension" as openregspecs_smcubes_core_extension
import "http://www.eclipse.org/efbt/data_meta_model" as data_meta_model
import "http://www.eclipse.org/efbt/bpmn_lite" as bpmn_lite
import "http://www.example.org/sql_lite" as sql_lite
import "http://www.eclipse.org/efbt/testing" as testing
import "http://www.eclipse.org/efbt/module_management" as module_management

OpenRegSpecs returns open_reg_specs::OpenRegSpecs:
	{open_reg_specs::OpenRegSpecs}
	'OpenRegSpecs'
	'{'
		('requirements' '{' requirements+=RequirementsModule ( "," requirements+=RequirementsModule)* '}' )?
		('types_and_concepts' types_and_concepts=SMCubesCoreModel)?
		('data_model' '{' data_model+=EntityModule ( "," data_model+=EntityModule)* '}' )?
		('process_workflow' '{' process_workflow+=SubProcess ( "," process_workflow+=SubProcess)* '}' )?
		('report_generation' '{' report_generation+=SQLEntityModule ( "," report_generation+=SQLEntityModule)* '}' )?
		('tests' '{' tests+=TestModule ( "," tests+=TestModule)* '}' )?
	'}';
















Entity returns data_meta_model::Entity:
	GeneratedEntity | DerivedEntity | BasicEntity;


FlowElement returns bpmn_lite::FlowElement:
	SequenceFlow | Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;

SQLEntity returns sql_lite::SQLEntity:
	SQLEntity_Impl | View | Table;



RequirementsSection returns requirements_text::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;













Attribute returns data_meta_model::Attribute:
	Attribute_Impl | RelationshipAttribute_Impl | OneToOneRelationshipAttribute | ManyToOneRelationshipAttribute | OneToManyRelationshipAttribute | ManyToManyRelationshipAttribute;




FlowNode returns bpmn_lite::FlowNode:
	Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;











TestScope returns testing::TestScope:
	TestScope_Impl | UnitTestScope | E2ETestScope;


RequirementsModule returns requirements_text::RequirementsModule:
	{requirements_text::RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

SMCubesCoreModel returns openregspecs_smcubes_core_extension::SMCubesCoreModel:
	{openregspecs_smcubes_core_extension::SMCubesCoreModel}
	'SMCubesCoreModel'
	name=EString
	'{'
		('variableModules' '{' variableModules+=VariableModule ( "," variableModules+=VariableModule)* '}' )?
		('domainModules' '{' domainModules+=DomainModule ( "," domainModules+=DomainModule)* '}' )?
		('memberModules' '{' memberModules+=MemberModule ( "," memberModules+=MemberModule)* '}' )?
		('subDomainModules' '{' subDomainModules+=SubDomainModule ( "," subDomainModules+=SubDomainModule)* '}' )?
		('memberHierarchyModules' '{' memberHierarchyModules+=MemberHierarchyModule ( "," memberHierarchyModules+=MemberHierarchyModule)* '}' )?
	'}';

EntityModule returns data_meta_model::EntityModule:
	{data_meta_model::EntityModule}
	'EntityModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('entities' '{' entities+=Entity ( "," entities+=Entity)* '}' )?
	'}';

SubProcess returns bpmn_lite::SubProcess:
	{bpmn_lite::SubProcess}
	(invisible?='invisible')?
	'SubProcess'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('flowElements' '{' flowElements+=FlowElement ( "," flowElements+=FlowElement)* '}' )?
	'}';

SQLEntityModule returns sql_lite::SQLEntityModule:
	{sql_lite::SQLEntityModule}
	'SQLEntityModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('sqlEntities' '{' sqlEntities+=SQLEntity ( "," sqlEntities+=SQLEntity)* '}' )?
	'}';

TestModule returns testing::TestModule:
	{testing::TestModule}
	'TestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=Test ( "," tests+=Test)* '}' )?
	'}';

ModuleDependencies returns module_management::ModuleDependencies:
	{module_management::ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ModuleLongName returns module_management::ModuleLongName:
	{module_management::ModuleLongName}
	'ModuleLongName'
	name=EString;

TitledRequirementsSection returns requirements_text::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[requirements_text::RequirementsSectionLinkWithText|EString])?
		'requirementsType' requirementsType=[requirements_text::RequirementType|EString]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';

AllowedTypes returns requirements_text::AllowedTypes:
	{requirements_text::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

ModuleDependency returns module_management::ModuleDependency:
	{module_management::ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[module_management::Module|EString])?
		('longName' longName=[module_management::ModuleLongName|EString])?
	'}';

Module returns module_management::Module:
	{module_management::Module}
	'Module'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

RequirementsSectionLinkWithText returns requirements_text::RequirementsSectionLinkWithText:
	{requirements_text::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[requirements_text::TitledRequirementsSection|EString])?
	'}';

RequirementType returns requirements_text::RequirementType:
	{requirements_text::RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns requirements_text::RequirementsSectionImage:
	{requirements_text::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns requirements_text::RequirementsSectionText:
	{requirements_text::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

VariableModule returns openregspecs_smcubes_core_extension::VariableModule:
	{openregspecs_smcubes_core_extension::VariableModule}
	'VariableModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('variables' '{' variables+=VARIABLE ( "," variables+=VARIABLE)* '}' )?
	'}';

DomainModule returns openregspecs_smcubes_core_extension::DomainModule:
	{openregspecs_smcubes_core_extension::DomainModule}
	'DomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('domains' '{' domains+=DOMAIN ( "," domains+=DOMAIN)* '}' )?
	'}';

MemberModule returns openregspecs_smcubes_core_extension::MemberModule:
	{openregspecs_smcubes_core_extension::MemberModule}
	'MemberModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('members' '{' members+=MEMBER ( "," members+=MEMBER)* '}' )?
	'}';

SubDomainModule returns openregspecs_smcubes_core_extension::SubDomainModule:
	{openregspecs_smcubes_core_extension::SubDomainModule}
	'SubDomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('subdomains' '{' subdomains+=SUBDOMAIN ( "," subdomains+=SUBDOMAIN)* '}' )?
	'}';

MemberHierarchyModule returns openregspecs_smcubes_core_extension::MemberHierarchyModule:
	{openregspecs_smcubes_core_extension::MemberHierarchyModule}
	'MemberHierarchyModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('memberHierarchies' '{' memberHierarchies+=MEMBER_HIERARCHY ( "," memberHierarchies+=MEMBER_HIERARCHY)* '}' )?
		('memberHierarchiesNodes' '{' memberHierarchiesNodes+=MEMBER_HIERARCHY_NODE ( "," memberHierarchiesNodes+=MEMBER_HIERARCHY_NODE)* '}' )?
	'}';

VARIABLE returns core::VARIABLE:
	{core::VARIABLE}
	'VARIABLE'
	name=EString
	'{'
		('conceptName' conceptName=EString)?
		('code' code=EString)?
		('description' description=EString)?
		('primary_concept' primary_concept=EString)?
		('variable_id' variable_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

DOMAIN returns core::DOMAIN:
	{core::DOMAIN}
	(is_enumerated?='is_enumerated')?
	(is_reference?='is_reference')?
	'DOMAIN'
	name=EString
	'{'
		('code' code=EString)?
		('data_type' data_type=FACET_VALUE_TYPE)?
		('description' description=EString)?
		('domain_id' domain_id=EString)?
		('displayName' displayName=EString)?
		('facet_id' facet_id=[core::FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

MAINTENANCE_AGENCY returns core::MAINTENANCE_AGENCY:
	{core::MAINTENANCE_AGENCY}
	'MAINTENANCE_AGENCY'
	name=EString
	'{'
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
	'}';

enum FACET_VALUE_TYPE returns core::FACET_VALUE_TYPE:
				BigInteger = 'BigInteger' | Boolean = 'Boolean' | DateTime = 'DateTime' | DayMonthDayMonth = 'DayMonthDayMonth' | Decimal = 'Decimal' | Double = 'Double' | Duration = 'Duration' | Float = 'Float' | GregorianDay = 'GregorianDay' | GregorianMonth = 'GregorianMonth' | GregorianYear = 'GregorianYear' | Integer = 'Integer' | Long = 'Long' | Short = 'Short' | String = 'String' | Time = 'Time' | URI = 'URI';

FACET_COLLECTION returns core::FACET_COLLECTION:
	{core::FACET_COLLECTION}
	'FACET_COLLECTION'
	facet_id=EString
	'{'
		('code' code=EString)?
		('facet_value_type' facet_value_type=FACET_VALUE_TYPE)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MEMBER returns core::MEMBER:
	{core::MEMBER}
	'MEMBER'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_id' member_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

SUBDOMAIN returns core::SUBDOMAIN:
	{core::SUBDOMAIN}
	(is_listed?='is_listed')?
	(is_natural?='is_natural')?
	'SUBDOMAIN'
	subdomain_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('description' description=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('facet_id' facet_id=[core::FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
		('items' '{' items+=SUBDOMAIN_ENUMERATION ( "," items+=SUBDOMAIN_ENUMERATION)* '}' )?
	'}';

SUBDOMAIN_ENUMERATION returns core::SUBDOMAIN_ENUMERATION:
	{core::SUBDOMAIN_ENUMERATION}
	'SUBDOMAIN_ENUMERATION'
	'{'
		('order' order=EInt)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('member_id' member_id=[core::MEMBER|EString])?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

MEMBER_HIERARCHY returns core::MEMBER_HIERARCHY:
	{core::MEMBER_HIERARCHY}
	'MEMBER_HIERARCHY'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_hierarchy_id' member_hierarchy_id=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

MEMBER_HIERARCHY_NODE returns core::MEMBER_HIERARCHY_NODE:
	{core::MEMBER_HIERARCHY_NODE}
	'MEMBER_HIERARCHY_NODE'
	'{'
		('comparator' comparator=EString)?
		('level' level=EInt)?
		('operator' operator=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('member_hierarchy_id' member_hierarchy_id=[core::MEMBER_HIERARCHY|EString])?
		('member_id' member_id=[core::MEMBER|EString])?
		('parent_member_id' parent_member_id=[core::MEMBER|EString])?
	'}';

GeneratedEntity returns data_meta_model::GeneratedEntity:
	{data_meta_model::GeneratedEntity}
	'GeneratedEntity'
	name=EString
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

DerivedEntity returns data_meta_model::DerivedEntity:
	{data_meta_model::DerivedEntity}
	'DerivedEntity'
	name=EString
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

BasicEntity returns data_meta_model::BasicEntity:
	{data_meta_model::BasicEntity}
	'BasicEntity'
	name=EString
	'{'
		('superClass' superClass=[data_meta_model::BasicEntity|EString])?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

Attribute_Impl returns data_meta_model::Attribute:
	{data_meta_model::Attribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	'Attribute'
	name=EString
	'{'
		('classifier' classifier=[data_meta_model::Type|EString])?
		('concept' concept=[data_meta_model::Concept|EString])?
	'}';

Concept returns data_meta_model::Concept:
	{data_meta_model::Concept}
	'Concept'
	'{'
		('conceptName' conceptName=EString)?
	'}';

RelationshipAttribute_Impl returns data_meta_model::RelationshipAttribute:
	{data_meta_model::RelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'RelationshipAttribute'
	name=EString
	'{'
		('classifier' classifier=[data_meta_model::Type|EString])?
		('concept' concept=[data_meta_model::Concept|EString])?
		('entity' entity=[data_meta_model::Entity|EString])?
	'}';

OneToOneRelationshipAttribute returns data_meta_model::OneToOneRelationshipAttribute:
	{data_meta_model::OneToOneRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'OneToOneRelationshipAttribute'
	name=EString
	'{'
		('classifier' classifier=[data_meta_model::Type|EString])?
		('concept' concept=[data_meta_model::Concept|EString])?
		('entity' entity=[data_meta_model::Entity|EString])?
	'}';

ManyToOneRelationshipAttribute returns data_meta_model::ManyToOneRelationshipAttribute:
	{data_meta_model::ManyToOneRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'ManyToOneRelationshipAttribute'
	name=EString
	'{'
		('classifier' classifier=[data_meta_model::Type|EString])?
		('concept' concept=[data_meta_model::Concept|EString])?
		('entity' entity=[data_meta_model::Entity|EString])?
	'}';

OneToManyRelationshipAttribute returns data_meta_model::OneToManyRelationshipAttribute:
	{data_meta_model::OneToManyRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'OneToManyRelationshipAttribute'
	name=EString
	'{'
		('classifier' classifier=[data_meta_model::Type|EString])?
		('concept' concept=[data_meta_model::Concept|EString])?
		('entity' entity=[data_meta_model::Entity|EString])?
	'}';

ManyToManyRelationshipAttribute returns data_meta_model::ManyToManyRelationshipAttribute:
	{data_meta_model::ManyToManyRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'ManyToManyRelationshipAttribute'
	name=EString
	'{'
		('classifier' classifier=[data_meta_model::Type|EString])?
		('concept' concept=[data_meta_model::Concept|EString])?
		('entity' entity=[data_meta_model::Entity|EString])?
	'}';

SequenceFlow returns bpmn_lite::SequenceFlow:
	{bpmn_lite::SequenceFlow}
	(invisible?='invisible')?
	'SequenceFlow'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('targetRef' targetRef=[bpmn_lite::FlowNode|EString])?
		('sourceRef' sourceRef=[bpmn_lite::FlowNode|EString])?
	'}';

Task_Impl returns bpmn_lite::Task:
	{bpmn_lite::Task}
	(invisible?='invisible')?
	'Task'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
	'}';

ExclusiveGateway returns bpmn_lite::ExclusiveGateway:
	{bpmn_lite::ExclusiveGateway}
	(invisible?='invisible')?
	'ExclusiveGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
	'}';

InclusiveGateway returns bpmn_lite::InclusiveGateway:
	{bpmn_lite::InclusiveGateway}
	(invisible?='invisible')?
	'InclusiveGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
	'}';

ParallelGateway returns bpmn_lite::ParallelGateway:
	{bpmn_lite::ParallelGateway}
	(invisible?='invisible')?
	'ParallelGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
	'}';

ServiceTask returns bpmn_lite::ServiceTask:
	{bpmn_lite::ServiceTask}
	(invisible?='invisible')?
	'ServiceTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('enrichedAttribute' enrichedAttribute=[data_meta_model::Attribute|EString])?
		('secondAttribute' secondAttribute=[data_meta_model::Attribute|EString])?
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

ScriptTask returns bpmn_lite::ScriptTask:
	{bpmn_lite::ScriptTask}
	(invisible?='invisible')?
	'ScriptTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('outputLayer' outputLayer=[data_meta_model::GeneratedEntity|EString])?
		('selectionLayers' '{' selectionLayers+=SelectionLayer ( "," selectionLayers+=SelectionLayer)* '}' )?
	'}';

UserTask returns bpmn_lite::UserTask:
	{bpmn_lite::UserTask}
	(invisible?='invisible')?
	'UserTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[bpmn_lite::SequenceFlow|EString] ( "," outgoing+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[bpmn_lite::SequenceFlow|EString] ( "," incoming+=[bpmn_lite::SequenceFlow|EString])* ')' )?
		('entity' entity=[data_meta_model::BasicEntity|EString])?
	'}';

Scenario returns testing::Scenario:
	{testing::Scenario}
	(invisible?='invisible')?
	'Scenario'
	name=EString
	'{'
		('description' description=EString)?
		('requiredAttributes' '(' requiredAttributes+=[data_meta_model::Attribute|EString] ( "," requiredAttributes+=[data_meta_model::Attribute|EString])* ')' )?
		('data_constraints' data_constraints=DataConstraint)?
	'}';

DataConstraint returns testing::DataConstraint:
	{testing::DataConstraint}
	'DataConstraint'
	'{'
		('comparison' comparison=AttrComparison)?
		('attr1' attr1=[data_meta_model::Attribute|EString])?
		('attr2' attr2=[data_meta_model::Attribute|EString])?
	'}';

enum AttrComparison returns testing::AttrComparison:
				equals = 'equals' | less_than = 'less_than' | greater_than = 'greater_than';

SelectionLayer returns testing::SelectionLayer:
	{testing::SelectionLayer}
	(invisible?='invisible')?
	'SelectionLayer'
	name=EString
	'{'
		('generatedEntity' generatedEntity=[data_meta_model::GeneratedEntity|EString])?
	'}';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

SQLEntity_Impl returns sql_lite::SQLEntity:
	{sql_lite::SQLEntity}
	'SQLEntity'
	name=EString;

View returns sql_lite::View:
	{sql_lite::View}
	'View'
	name=EString
	'{'
		('selectClause' selectClause=SelectClause)?
		('fromClause' fromClause=FromClause)?
		('whereClause' whereClause=WhereClause)?
	'}';

Table returns sql_lite::Table:
	{sql_lite::Table}
	'Table'
	name=EString
	'{'
		('entity' entity=[data_meta_model::Entity|EString])?
	'}';

SelectClause returns sql_lite::SelectClause:
	{sql_lite::SelectClause}
	'SelectClause'
	'{'
		('columns' '{' columns+=SelectColumn ( "," columns+=SelectColumn)* '}' )?
	'}';

FromClause returns sql_lite::FromClause:
	{sql_lite::FromClause}
	'FromClause'
	'{'
		('sqlEntities' sqlEntities=[sql_lite::SQLEntity|EString])?
	'}';

WhereClause returns sql_lite::WhereClause:
	{sql_lite::WhereClause}
	'WhereClause'
	;

SelectColumn returns sql_lite::SelectColumn:
	{sql_lite::SelectColumn}
	'SelectColumn'
	'{'
		('attribute' attribute=[data_meta_model::Attribute|EString])?
		('as' ^as=[data_meta_model::Attribute|EString])?
		('memberAsConstant' memberAsConstant=[data_meta_model::EnumMember|EString])?
	'}';

EnumMember returns data_meta_model::EnumMember:
	{data_meta_model::EnumMember}
	'EnumMember'
	;

Test returns testing::Test:
	{testing::Test}
	'Test'
	name=EString
	'{'
		('inputData' '(' inputData+=[testing::CSVFile|EString] ( "," inputData+=[testing::CSVFile|EString])* ')' )?
		('expectedResult' '(' expectedResult+=[testing::CSVFile|EString] ( "," expectedResult+=[testing::CSVFile|EString])* ')' )?
		('scope' scope=TestScope)?
	'}';

CSVFile returns testing::CSVFile:
	{testing::CSVFile}
	'CSVFile'
	'{'
		('fileName' fileName=EString)?
	'}';

TestScope_Impl returns testing::TestScope:
	{testing::TestScope}
	'TestScope'
	name=EString;

UnitTestScope returns testing::UnitTestScope:
	{testing::UnitTestScope}
	'UnitTestScope'
	name=EString
	'{'
		('scenarios' scenarios=[testing::Scenario|EString])?
	'}';

E2ETestScope returns testing::E2ETestScope:
	{testing::E2ETestScope}
	'E2ETestScope'
	name=EString
	'{'
		('scenarios' '(' scenarios+=[testing::Scenario|EString] ( "," scenarios+=[testing::Scenario|EString])* ')' )?
		('layer' layer=[testing::SelectionLayer|EString])?
		('scriptTask' scriptTask=[bpmn_lite::ScriptTask|EString])?
	'}';
