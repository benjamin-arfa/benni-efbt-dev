// automatically generated by Xtext
grammar org.eclipse.efbt.dsl.OpenRegSpecs with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/efbt/open_reg_specs" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


FlowNode returns FlowNode:
	Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;


Attribute returns Attribute:
	Attribute_Impl | RelationshipAttribute_Impl | OneToOneRelationshipAttribute | ManyToOneRelationshipAttribute | OneToManyRelationshipAttribute | ManyToManyRelationshipAttribute;


FlowElement returns FlowElement:
	SequenceFlow | Task_Impl | ExclusiveGateway | InclusiveGateway | ParallelGateway | ServiceTask | SubProcess | ScriptTask | UserTask;




Type returns Type:
	SUBDOMAIN;

Concept returns Concept:
	Concept_Impl | VARIABLE;


Entity returns Entity:
	GeneratedEntity | DerivedEntity | BasicEntity;






EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

SequenceFlow returns SequenceFlow:
	{SequenceFlow}
	(invisible?='invisible')?
	'SequenceFlow'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('targetRef' targetRef=[FlowNode|EString])?
		('sourceRef' sourceRef=[FlowNode|EString])?
	'}';

Task_Impl returns Task:
	{Task}
	(invisible?='invisible')?
	'Task'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

ServiceTask returns ServiceTask:
	{ServiceTask}
	(invisible?='invisible')?
	'ServiceTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('enrichedAttribute' enrichedAttribute=[Attribute|EString])?
		('secondAttribute' secondAttribute=[Attribute|EString])?
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

SubProcess returns SubProcess:
	{SubProcess}
	(invisible?='invisible')?
	'SubProcess'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('flowElements' '{' flowElements+=FlowElement ( "," flowElements+=FlowElement)* '}' )?
	'}';

ScriptTask returns ScriptTask:
	{ScriptTask}
	(invisible?='invisible')?
	'ScriptTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('outputLayer' outputLayer=[GeneratedEntity|EString])?
		('selectionLayers' '{' selectionLayers+=SelectionLayer ( "," selectionLayers+=SelectionLayer)* '}' )?
	'}';

UserTask returns UserTask:
	{UserTask}
	(invisible?='invisible')?
	'UserTask'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
		('entity' entity=[BasicEntity|EString])?
	'}';

ExclusiveGateway returns ExclusiveGateway:
	{ExclusiveGateway}
	(invisible?='invisible')?
	'ExclusiveGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

InclusiveGateway returns InclusiveGateway:
	{InclusiveGateway}
	(invisible?='invisible')?
	'InclusiveGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

ParallelGateway returns ParallelGateway:
	{ParallelGateway}
	(invisible?='invisible')?
	'ParallelGateway'
	id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('outgoing' '(' outgoing+=[SequenceFlow|EString] ( "," outgoing+=[SequenceFlow|EString])* ')' )?
		('incoming' '(' incoming+=[SequenceFlow|EString] ( "," incoming+=[SequenceFlow|EString])* ')' )?
	'}';

Attribute_Impl returns Attribute:
	{Attribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	'Attribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
	'}';

Scenario returns Scenario:
	{Scenario}
	(invisible?='invisible')?
	'Scenario'
	name=EString
	'{'
		('description' description=EString)?
		('requiredAttributes' '(' requiredAttributes+=[Attribute|EString] ( "," requiredAttributes+=[Attribute|EString])* ')' )?
		('data_constraints' data_constraints=DataConstraint)?
	'}';

Concept_Impl returns Concept:
	{Concept}
	'Concept'
	'{'
		('conceptName' conceptName=EString)?
	'}';

RelationshipAttribute_Impl returns RelationshipAttribute:
	{RelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'RelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

OneToOneRelationshipAttribute returns OneToOneRelationshipAttribute:
	{OneToOneRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'OneToOneRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

ManyToOneRelationshipAttribute returns ManyToOneRelationshipAttribute:
	{ManyToOneRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'ManyToOneRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

OneToManyRelationshipAttribute returns OneToManyRelationshipAttribute:
	{OneToManyRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'OneToManyRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

ManyToManyRelationshipAttribute returns ManyToManyRelationshipAttribute:
	{ManyToManyRelationshipAttribute}
	(isPK?='isPK')?
	(ordered?='ordered')?
	(containment?='containment')?
	(mandatory?='mandatory')?
	(dominant?='dominant')?
	'ManyToManyRelationshipAttribute'
	name=EString
	'{'
		('type' type=[Type|EString])?
		('concept' concept=[Concept|EString])?
		('entity' entity=[Entity|EString])?
	'}';

SUBDOMAIN returns SUBDOMAIN:
	{SUBDOMAIN}
	(is_listed?='is_listed')?
	(is_natural?='is_natural')?
	'SUBDOMAIN'
	subdomain_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('description' description=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('facet_id' facet_id=[FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
		('items' '{' items+=SUBDOMAIN_ENUMERATION ( "," items+=SUBDOMAIN_ENUMERATION)* '}' )?
	'}';

DOMAIN returns DOMAIN:
	{DOMAIN}
	(is_enumerated?='is_enumerated')?
	(is_reference?='is_reference')?
	'DOMAIN'
	name=EString
	'{'
		('code' code=EString)?
		('data_type' data_type=FACET_VALUE_TYPE)?
		('description' description=EString)?
		('domain_id' domain_id=EString)?
		('displayName' displayName=EString)?
		('facet_id' facet_id=[FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

FACET_COLLECTION returns FACET_COLLECTION:
	{FACET_COLLECTION}
	'FACET_COLLECTION'
	facet_id=EString
	'{'
		('code' code=EString)?
		('facet_value_type' facet_value_type=FACET_VALUE_TYPE)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

MAINTENANCE_AGENCY returns MAINTENANCE_AGENCY:
	{MAINTENANCE_AGENCY}
	'MAINTENANCE_AGENCY'
	name=EString
	'{'
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
	'}';

SUBDOMAIN_ENUMERATION returns SUBDOMAIN_ENUMERATION:
	{SUBDOMAIN_ENUMERATION}
	'SUBDOMAIN_ENUMERATION'
	'{'
		('order' order=EInt)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('member_id' member_id=[MEMBER|EString])?
	'}';

enum FACET_VALUE_TYPE returns FACET_VALUE_TYPE:
				BigInteger = 'BigInteger' | Boolean = 'Boolean' | DateTime = 'DateTime' | DayMonthDayMonth = 'DayMonthDayMonth' | Decimal = 'Decimal' | Double = 'Double' | Duration = 'Duration' | Float = 'Float' | GregorianDay = 'GregorianDay' | GregorianMonth = 'GregorianMonth' | GregorianYear = 'GregorianYear' | Integer = 'Integer' | Long = 'Long' | Short = 'Short' | String = 'String' | Time = 'Time' | URI = 'URI';

MEMBER returns MEMBER:
	{MEMBER}
	'MEMBER'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_id' member_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

VARIABLE returns VARIABLE:
	{VARIABLE}
	'VARIABLE'
	name=EString
	'{'
		('conceptName' conceptName=EString)?
		('code' code=EString)?
		('description' description=EString)?
		('primary_concept' primary_concept=EString)?
		('variable_id' variable_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[MAINTENANCE_AGENCY|EString])?
	'}';

GeneratedEntity returns GeneratedEntity:
	{GeneratedEntity}
	'GeneratedEntity'
	name=EString
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

DerivedEntity returns DerivedEntity:
	{DerivedEntity}
	'DerivedEntity'
	name=EString
	'{'
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

BasicEntity returns BasicEntity:
	{BasicEntity}
	'BasicEntity'
	name=EString
	'{'
		('superClass' superClass=[BasicEntity|EString])?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

DataConstraint returns DataConstraint:
	{DataConstraint}
	'DataConstraint'
	'{'
		('comparison' comparison=AttrComparison)?
		('attr1' attr1=[Attribute|EString])?
		('attr2' attr2=[Attribute|EString])?
	'}';

enum AttrComparison returns AttrComparison:
				equals = 'equals' | less_than = 'less_than' | greater_than = 'greater_than';

SelectionLayer returns SelectionLayer:
	{SelectionLayer}
	(invisible?='invisible')?
	'SelectionLayer'
	name=EString
	'{'
		('generatedEntity' generatedEntity=[GeneratedEntity|EString])?
	'}';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';
