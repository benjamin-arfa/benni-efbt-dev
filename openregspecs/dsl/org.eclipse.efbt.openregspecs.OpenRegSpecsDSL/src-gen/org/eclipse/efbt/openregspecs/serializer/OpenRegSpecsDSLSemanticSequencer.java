/*
 * generated by Xtext 2.26.0
 */
package org.eclipse.efbt.openregspecs.serializer;

import bird_model.BIRDModel;
import bird_model.Bird_modelPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.Bpmn_litePackage;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.ExclusiveGateway;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.InclusiveGateway;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.ParallelGateway;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.ScriptTask;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.SequenceFlow;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.ServiceTask;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.SubProcess;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.Task;
import org.eclipse.efbt.openregspecs.model.bpmn_lite.UserTask;
import org.eclipse.efbt.openregspecs.model.core.CorePackage;
import org.eclipse.efbt.openregspecs.model.core.DOMAIN;
import org.eclipse.efbt.openregspecs.model.core.FACET_COLLECTION;
import org.eclipse.efbt.openregspecs.model.core.MAINTENANCE_AGENCY;
import org.eclipse.efbt.openregspecs.model.core.MEMBER;
import org.eclipse.efbt.openregspecs.model.core.MEMBER_HIERARCHY;
import org.eclipse.efbt.openregspecs.model.core.MEMBER_HIERARCHY_NODE;
import org.eclipse.efbt.openregspecs.model.core.SUBDOMAIN;
import org.eclipse.efbt.openregspecs.model.core.SUBDOMAIN_ENUMERATION;
import org.eclipse.efbt.openregspecs.model.core.VARIABLE;
import org.eclipse.efbt.openregspecs.model.data_meta_model.Attribute;
import org.eclipse.efbt.openregspecs.model.data_meta_model.BasicEntity;
import org.eclipse.efbt.openregspecs.model.data_meta_model.Concept;
import org.eclipse.efbt.openregspecs.model.data_meta_model.Data_meta_modelPackage;
import org.eclipse.efbt.openregspecs.model.data_meta_model.DerivedEntity;
import org.eclipse.efbt.openregspecs.model.data_meta_model.EntityModule;
import org.eclipse.efbt.openregspecs.model.data_meta_model.EnumMember;
import org.eclipse.efbt.openregspecs.model.data_meta_model.GeneratedEntity;
import org.eclipse.efbt.openregspecs.model.data_meta_model.ManyToManyRelationshipAttribute;
import org.eclipse.efbt.openregspecs.model.data_meta_model.ManyToOneRelationshipAttribute;
import org.eclipse.efbt.openregspecs.model.data_meta_model.OneToManyRelationshipAttribute;
import org.eclipse.efbt.openregspecs.model.data_meta_model.OneToOneRelationshipAttribute;
import org.eclipse.efbt.openregspecs.model.data_meta_model.RelationshipAttribute;
import org.eclipse.efbt.openregspecs.model.module_management.ModuleDependencies;
import org.eclipse.efbt.openregspecs.model.module_management.ModuleDependency;
import org.eclipse.efbt.openregspecs.model.module_management.ModuleLongName;
import org.eclipse.efbt.openregspecs.model.module_management.Module_managementPackage;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.DomainModule;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.MemberHierarchyModule;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.MemberModule;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.SMCubesCoreModel;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.SubDomainModule;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.VariableModule;
import org.eclipse.efbt.openregspecs.model.openregspecs_smcubes_core_extension.openregspecs_smcubes_core_extensionPackage;
import org.eclipse.efbt.openregspecs.model.requirements_text.AllowedTypes;
import org.eclipse.efbt.openregspecs.model.requirements_text.RequirementType;
import org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsModule;
import org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionImage;
import org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionLinkWithText;
import org.eclipse.efbt.openregspecs.model.requirements_text.RequirementsSectionText;
import org.eclipse.efbt.openregspecs.model.requirements_text.Requirements_textPackage;
import org.eclipse.efbt.openregspecs.model.requirements_text.TitledRequirementsSection;
import org.eclipse.efbt.openregspecs.model.sql_lite.FromClause;
import org.eclipse.efbt.openregspecs.model.sql_lite.SQLEntity;
import org.eclipse.efbt.openregspecs.model.sql_lite.SQLEntityModule;
import org.eclipse.efbt.openregspecs.model.sql_lite.SelectClause;
import org.eclipse.efbt.openregspecs.model.sql_lite.SelectColumn;
import org.eclipse.efbt.openregspecs.model.sql_lite.Sql_litePackage;
import org.eclipse.efbt.openregspecs.model.sql_lite.Table;
import org.eclipse.efbt.openregspecs.model.sql_lite.View;
import org.eclipse.efbt.openregspecs.model.sql_lite.WhereClause;
import org.eclipse.efbt.openregspecs.model.testing.CSVFile;
import org.eclipse.efbt.openregspecs.model.testing.DataConstraint;
import org.eclipse.efbt.openregspecs.model.testing.E2ETestScope;
import org.eclipse.efbt.openregspecs.model.testing.Scenario;
import org.eclipse.efbt.openregspecs.model.testing.SelectionLayer;
import org.eclipse.efbt.openregspecs.model.testing.Test;
import org.eclipse.efbt.openregspecs.model.testing.TestModule;
import org.eclipse.efbt.openregspecs.model.testing.TestScope;
import org.eclipse.efbt.openregspecs.model.testing.TestingPackage;
import org.eclipse.efbt.openregspecs.model.testing.UnitTestScope;
import org.eclipse.efbt.openregspecs.services.OpenRegSpecsDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class OpenRegSpecsDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OpenRegSpecsDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Bird_modelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Bird_modelPackage.BIRD_MODEL:
				sequence_BIRDModel(context, (BIRDModel) semanticObject); 
				return; 
			}
		else if (epackage == Bpmn_litePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Bpmn_litePackage.EXCLUSIVE_GATEWAY:
				sequence_ExclusiveGateway(context, (ExclusiveGateway) semanticObject); 
				return; 
			case Bpmn_litePackage.INCLUSIVE_GATEWAY:
				sequence_InclusiveGateway(context, (InclusiveGateway) semanticObject); 
				return; 
			case Bpmn_litePackage.PARALLEL_GATEWAY:
				sequence_ParallelGateway(context, (ParallelGateway) semanticObject); 
				return; 
			case Bpmn_litePackage.SCRIPT_TASK:
				sequence_ScriptTask(context, (ScriptTask) semanticObject); 
				return; 
			case Bpmn_litePackage.SEQUENCE_FLOW:
				sequence_SequenceFlow(context, (SequenceFlow) semanticObject); 
				return; 
			case Bpmn_litePackage.SERVICE_TASK:
				sequence_ServiceTask(context, (ServiceTask) semanticObject); 
				return; 
			case Bpmn_litePackage.SUB_PROCESS:
				sequence_SubProcess(context, (SubProcess) semanticObject); 
				return; 
			case Bpmn_litePackage.TASK:
				sequence_Task_Impl(context, (Task) semanticObject); 
				return; 
			case Bpmn_litePackage.USER_TASK:
				sequence_UserTask(context, (UserTask) semanticObject); 
				return; 
			}
		else if (epackage == CorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CorePackage.DOMAIN:
				sequence_DOMAIN(context, (DOMAIN) semanticObject); 
				return; 
			case CorePackage.FACET_COLLECTION:
				sequence_FACET_COLLECTION(context, (FACET_COLLECTION) semanticObject); 
				return; 
			case CorePackage.MAINTENANCE_AGENCY:
				sequence_MAINTENANCE_AGENCY(context, (MAINTENANCE_AGENCY) semanticObject); 
				return; 
			case CorePackage.MEMBER:
				sequence_MEMBER(context, (MEMBER) semanticObject); 
				return; 
			case CorePackage.MEMBER_HIERARCHY:
				sequence_MEMBER_HIERARCHY(context, (MEMBER_HIERARCHY) semanticObject); 
				return; 
			case CorePackage.MEMBER_HIERARCHY_NODE:
				sequence_MEMBER_HIERARCHY_NODE(context, (MEMBER_HIERARCHY_NODE) semanticObject); 
				return; 
			case CorePackage.SUBDOMAIN:
				sequence_SUBDOMAIN(context, (SUBDOMAIN) semanticObject); 
				return; 
			case CorePackage.SUBDOMAIN_ENUMERATION:
				sequence_SUBDOMAIN_ENUMERATION(context, (SUBDOMAIN_ENUMERATION) semanticObject); 
				return; 
			case CorePackage.VARIABLE:
				sequence_VARIABLE(context, (VARIABLE) semanticObject); 
				return; 
			}
		else if (epackage == Data_meta_modelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Data_meta_modelPackage.ATTRIBUTE:
				sequence_Attribute_Impl(context, (Attribute) semanticObject); 
				return; 
			case Data_meta_modelPackage.BASIC_ENTITY:
				sequence_BasicEntity(context, (BasicEntity) semanticObject); 
				return; 
			case Data_meta_modelPackage.CONCEPT:
				sequence_Concept(context, (Concept) semanticObject); 
				return; 
			case Data_meta_modelPackage.DERIVED_ENTITY:
				sequence_DerivedEntity(context, (DerivedEntity) semanticObject); 
				return; 
			case Data_meta_modelPackage.ENTITY_MODULE:
				sequence_EntityModule(context, (EntityModule) semanticObject); 
				return; 
			case Data_meta_modelPackage.ENUM_MEMBER:
				sequence_EnumMember(context, (EnumMember) semanticObject); 
				return; 
			case Data_meta_modelPackage.GENERATED_ENTITY:
				sequence_GeneratedEntity(context, (GeneratedEntity) semanticObject); 
				return; 
			case Data_meta_modelPackage.MANY_TO_MANY_RELATIONSHIP_ATTRIBUTE:
				sequence_ManyToManyRelationshipAttribute(context, (ManyToManyRelationshipAttribute) semanticObject); 
				return; 
			case Data_meta_modelPackage.MANY_TO_ONE_RELATIONSHIP_ATTRIBUTE:
				sequence_ManyToOneRelationshipAttribute(context, (ManyToOneRelationshipAttribute) semanticObject); 
				return; 
			case Data_meta_modelPackage.ONE_TO_MANY_RELATIONSHIP_ATTRIBUTE:
				sequence_OneToManyRelationshipAttribute(context, (OneToManyRelationshipAttribute) semanticObject); 
				return; 
			case Data_meta_modelPackage.ONE_TO_ONE_RELATIONSHIP_ATTRIBUTE:
				sequence_OneToOneRelationshipAttribute(context, (OneToOneRelationshipAttribute) semanticObject); 
				return; 
			case Data_meta_modelPackage.RELATIONSHIP_ATTRIBUTE:
				sequence_RelationshipAttribute_Impl(context, (RelationshipAttribute) semanticObject); 
				return; 
			}
		else if (epackage == Module_managementPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Module_managementPackage.MODULE:
				sequence_Module(context, (org.eclipse.efbt.openregspecs.model.module_management.Module) semanticObject); 
				return; 
			case Module_managementPackage.MODULE_DEPENDENCIES:
				sequence_ModuleDependencies(context, (ModuleDependencies) semanticObject); 
				return; 
			case Module_managementPackage.MODULE_DEPENDENCY:
				sequence_ModuleDependency(context, (ModuleDependency) semanticObject); 
				return; 
			case Module_managementPackage.MODULE_LONG_NAME:
				sequence_ModuleLongName(context, (ModuleLongName) semanticObject); 
				return; 
			}
		else if (epackage == openregspecs_smcubes_core_extensionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case openregspecs_smcubes_core_extensionPackage.DOMAIN_MODULE:
				sequence_DomainModule(context, (DomainModule) semanticObject); 
				return; 
			case openregspecs_smcubes_core_extensionPackage.MEMBER_HIERARCHY_MODULE:
				sequence_MemberHierarchyModule(context, (MemberHierarchyModule) semanticObject); 
				return; 
			case openregspecs_smcubes_core_extensionPackage.MEMBER_MODULE:
				sequence_MemberModule(context, (MemberModule) semanticObject); 
				return; 
			case openregspecs_smcubes_core_extensionPackage.SM_CUBES_CORE_MODEL:
				sequence_SMCubesCoreModel(context, (SMCubesCoreModel) semanticObject); 
				return; 
			case openregspecs_smcubes_core_extensionPackage.SUB_DOMAIN_MODULE:
				sequence_SubDomainModule(context, (SubDomainModule) semanticObject); 
				return; 
			case openregspecs_smcubes_core_extensionPackage.VARIABLE_MODULE:
				sequence_VariableModule(context, (VariableModule) semanticObject); 
				return; 
			}
		else if (epackage == Requirements_textPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Requirements_textPackage.ALLOWED_TYPES:
				sequence_AllowedTypes(context, (AllowedTypes) semanticObject); 
				return; 
			case Requirements_textPackage.REQUIREMENT_TYPE:
				sequence_RequirementType(context, (RequirementType) semanticObject); 
				return; 
			case Requirements_textPackage.REQUIREMENTS_MODULE:
				sequence_RequirementsModule(context, (RequirementsModule) semanticObject); 
				return; 
			case Requirements_textPackage.REQUIREMENTS_SECTION_IMAGE:
				sequence_RequirementsSectionImage(context, (RequirementsSectionImage) semanticObject); 
				return; 
			case Requirements_textPackage.REQUIREMENTS_SECTION_LINK_WITH_TEXT:
				sequence_RequirementsSectionLinkWithText(context, (RequirementsSectionLinkWithText) semanticObject); 
				return; 
			case Requirements_textPackage.REQUIREMENTS_SECTION_TEXT:
				sequence_RequirementsSectionText(context, (RequirementsSectionText) semanticObject); 
				return; 
			case Requirements_textPackage.TITLED_REQUIREMENTS_SECTION:
				sequence_TitledRequirementsSection(context, (TitledRequirementsSection) semanticObject); 
				return; 
			}
		else if (epackage == Sql_litePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Sql_litePackage.FROM_CLAUSE:
				sequence_FromClause(context, (FromClause) semanticObject); 
				return; 
			case Sql_litePackage.SQL_ENTITY:
				sequence_SQLEntity_Impl(context, (SQLEntity) semanticObject); 
				return; 
			case Sql_litePackage.SQL_ENTITY_MODULE:
				sequence_SQLEntityModule(context, (SQLEntityModule) semanticObject); 
				return; 
			case Sql_litePackage.SELECT_CLAUSE:
				sequence_SelectClause(context, (SelectClause) semanticObject); 
				return; 
			case Sql_litePackage.SELECT_COLUMN:
				sequence_SelectColumn(context, (SelectColumn) semanticObject); 
				return; 
			case Sql_litePackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case Sql_litePackage.VIEW:
				sequence_View(context, (View) semanticObject); 
				return; 
			case Sql_litePackage.WHERE_CLAUSE:
				sequence_WhereClause(context, (WhereClause) semanticObject); 
				return; 
			}
		else if (epackage == TestingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TestingPackage.CSV_FILE:
				sequence_CSVFile(context, (CSVFile) semanticObject); 
				return; 
			case TestingPackage.DATA_CONSTRAINT:
				sequence_DataConstraint(context, (DataConstraint) semanticObject); 
				return; 
			case TestingPackage.E2E_TEST_SCOPE:
				sequence_E2ETestScope(context, (E2ETestScope) semanticObject); 
				return; 
			case TestingPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case TestingPackage.SELECTION_LAYER:
				sequence_SelectionLayer(context, (SelectionLayer) semanticObject); 
				return; 
			case TestingPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			case TestingPackage.TEST_MODULE:
				sequence_TestModule(context, (TestModule) semanticObject); 
				return; 
			case TestingPackage.TEST_SCOPE:
				sequence_TestScope_Impl(context, (TestScope) semanticObject); 
				return; 
			case TestingPackage.UNIT_TEST_SCOPE:
				sequence_UnitTestScope(context, (UnitTestScope) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AllowedTypes returns AllowedTypes
	 *
	 * Constraint:
	 *     (allowedTypes+=RequirementType allowedTypes+=RequirementType*)?
	 * </pre>
	 */
	protected void sequence_AllowedTypes(ISerializationContext context, AllowedTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *     Attribute_Impl returns Attribute
	 *
	 * Constraint:
	 *     (isPK?='isPK'? ordered?='ordered'? name=EString classifier=[Classifier|EString]? concept=[Concept|EString]?)
	 * </pre>
	 */
	protected void sequence_Attribute_Impl(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BIRDModel returns BIRDModel
	 *
	 * Constraint:
	 *     (
	 *         smCubesCoreModel=SMCubesCoreModel? 
	 *         (entityModules+=EntityModule entityModules+=EntityModule*)? 
	 *         (SQLEntityModules+=SQLEntityModule SQLEntityModules+=SQLEntityModule*)? 
	 *         (subProcesses+=SubProcess subProcesses+=SubProcess*)? 
	 *         (requirements+=RequirementsModule requirements+=RequirementsModule*)? 
	 *         (tests+=TestModule tests+=TestModule*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_BIRDModel(ISerializationContext context, BIRDModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns BasicEntity
	 *     BasicEntity returns BasicEntity
	 *
	 * Constraint:
	 *     (name=EString superClass=[BasicEntity|EString]? (attributes+=Attribute attributes+=Attribute*)?)
	 * </pre>
	 */
	protected void sequence_BasicEntity(ISerializationContext context, BasicEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CSVFile returns CSVFile
	 *
	 * Constraint:
	 *     fileName=EString?
	 * </pre>
	 */
	protected void sequence_CSVFile(ISerializationContext context, CSVFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Concept returns Concept
	 *
	 * Constraint:
	 *     conceptName=EString?
	 * </pre>
	 */
	protected void sequence_Concept(ISerializationContext context, Concept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DOMAIN returns DOMAIN
	 *
	 * Constraint:
	 *     (
	 *         is_enumerated?='is_enumerated'? 
	 *         is_reference?='is_reference'? 
	 *         name=EString 
	 *         code=EString? 
	 *         data_type=FACET_VALUE_TYPE? 
	 *         description=EString? 
	 *         domain_id=EString? 
	 *         displayName=EString? 
	 *         facet_id=[FACET_COLLECTION|EString]? 
	 *         maintenance_agency_id=[MAINTENANCE_AGENCY|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_DOMAIN(ISerializationContext context, DOMAIN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DataConstraint returns DataConstraint
	 *
	 * Constraint:
	 *     (comparison=AttrComparison? attr1=[Attribute|EString]? attr2=[Attribute|EString]?)
	 * </pre>
	 */
	protected void sequence_DataConstraint(ISerializationContext context, DataConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns DerivedEntity
	 *     DerivedEntity returns DerivedEntity
	 *
	 * Constraint:
	 *     (name=EString (attributes+=Attribute attributes+=Attribute*)?)
	 * </pre>
	 */
	protected void sequence_DerivedEntity(ISerializationContext context, DerivedEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DomainModule returns DomainModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (domains+=DOMAIN domains+=DOMAIN*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_DomainModule(ISerializationContext context, DomainModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestScope returns E2ETestScope
	 *     E2ETestScope returns E2ETestScope
	 *
	 * Constraint:
	 *     (name=EString (scenarios+=[Scenario|EString] scenarios+=[Scenario|EString]*)? layer=[SelectionLayer|EString]? scriptTask=[ScriptTask|EString]?)
	 * </pre>
	 */
	protected void sequence_E2ETestScope(ISerializationContext context, E2ETestScope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntityModule returns EntityModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         nsURI=EString? 
	 *         nsPrefix=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (entities+=Entity entities+=Entity*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_EntityModule(ISerializationContext context, EntityModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnumMember returns EnumMember
	 *
	 * Constraint:
	 *     {EnumMember}
	 * </pre>
	 */
	protected void sequence_EnumMember(ISerializationContext context, EnumMember semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns ExclusiveGateway
	 *     FlowNode returns ExclusiveGateway
	 *     ExclusiveGateway returns ExclusiveGateway
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ExclusiveGateway(ISerializationContext context, ExclusiveGateway semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FACET_COLLECTION returns FACET_COLLECTION
	 *
	 * Constraint:
	 *     (facet_id=EString code=EString? facet_value_type=FACET_VALUE_TYPE? name=EString? maintenance_agency_id=[MAINTENANCE_AGENCY|EString]?)
	 * </pre>
	 */
	protected void sequence_FACET_COLLECTION(ISerializationContext context, FACET_COLLECTION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FromClause returns FromClause
	 *
	 * Constraint:
	 *     sqlEntities=[SQLEntity|EString]?
	 * </pre>
	 */
	protected void sequence_FromClause(ISerializationContext context, FromClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns GeneratedEntity
	 *     GeneratedEntity returns GeneratedEntity
	 *
	 * Constraint:
	 *     (name=EString (attributes+=Attribute attributes+=Attribute*)?)
	 * </pre>
	 */
	protected void sequence_GeneratedEntity(ISerializationContext context, GeneratedEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns InclusiveGateway
	 *     FlowNode returns InclusiveGateway
	 *     InclusiveGateway returns InclusiveGateway
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_InclusiveGateway(ISerializationContext context, InclusiveGateway semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MAINTENANCE_AGENCY returns MAINTENANCE_AGENCY
	 *
	 * Constraint:
	 *     (name=EString code=EString? maintenance_agency_id=EString?)
	 * </pre>
	 */
	protected void sequence_MAINTENANCE_AGENCY(ISerializationContext context, MAINTENANCE_AGENCY semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MEMBER_HIERARCHY returns MEMBER_HIERARCHY
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         code=EString? 
	 *         description=EString? 
	 *         member_hierarchy_id=EString? 
	 *         domain_id=[DOMAIN|EString]? 
	 *         maintenance_agency_id=[MAINTENANCE_AGENCY|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_MEMBER_HIERARCHY(ISerializationContext context, MEMBER_HIERARCHY semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MEMBER_HIERARCHY_NODE returns MEMBER_HIERARCHY_NODE
	 *
	 * Constraint:
	 *     (
	 *         comparator=EString? 
	 *         level=EInt? 
	 *         operator=EString? 
	 *         valid_from=EDate? 
	 *         valid_to=EDate? 
	 *         member_hierarchy_id=[MEMBER_HIERARCHY|EString]? 
	 *         member_id=[MEMBER|EString]? 
	 *         parent_member_id=[MEMBER|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_MEMBER_HIERARCHY_NODE(ISerializationContext context, MEMBER_HIERARCHY_NODE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MEMBER returns MEMBER
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         code=EString? 
	 *         description=EString? 
	 *         member_id=EString? 
	 *         displayName=EString? 
	 *         domain_id=[DOMAIN|EString]? 
	 *         maintenance_agency_id=[MAINTENANCE_AGENCY|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_MEMBER(ISerializationContext context, MEMBER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns ManyToManyRelationshipAttribute
	 *     ManyToManyRelationshipAttribute returns ManyToManyRelationshipAttribute
	 *
	 * Constraint:
	 *     (
	 *         isPK?='isPK'? 
	 *         ordered?='ordered'? 
	 *         containment?='containment'? 
	 *         mandatory?='mandatory'? 
	 *         dominant?='dominant'? 
	 *         name=EString 
	 *         classifier=[Classifier|EString]? 
	 *         concept=[Concept|EString]? 
	 *         entity=[Entity|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_ManyToManyRelationshipAttribute(ISerializationContext context, ManyToManyRelationshipAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns ManyToOneRelationshipAttribute
	 *     ManyToOneRelationshipAttribute returns ManyToOneRelationshipAttribute
	 *
	 * Constraint:
	 *     (
	 *         isPK?='isPK'? 
	 *         ordered?='ordered'? 
	 *         containment?='containment'? 
	 *         mandatory?='mandatory'? 
	 *         dominant?='dominant'? 
	 *         name=EString 
	 *         classifier=[Classifier|EString]? 
	 *         concept=[Concept|EString]? 
	 *         entity=[Entity|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_ManyToOneRelationshipAttribute(ISerializationContext context, ManyToOneRelationshipAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MemberHierarchyModule returns MemberHierarchyModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (memberHierarchies+=MEMBER_HIERARCHY memberHierarchies+=MEMBER_HIERARCHY*)? 
	 *         (memberHierarchiesNodes+=MEMBER_HIERARCHY_NODE memberHierarchiesNodes+=MEMBER_HIERARCHY_NODE*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_MemberHierarchyModule(ISerializationContext context, MemberHierarchyModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MemberModule returns MemberModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (members+=MEMBER members+=MEMBER*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_MemberModule(ISerializationContext context, MemberModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleDependencies returns ModuleDependencies
	 *
	 * Constraint:
	 *     (theModules+=ModuleDependency theModules+=ModuleDependency*)?
	 * </pre>
	 */
	protected void sequence_ModuleDependencies(ISerializationContext context, ModuleDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleDependency returns ModuleDependency
	 *
	 * Constraint:
	 *     (moduleName=EString? moduleVersion=EString? theModule=[Module|EString]? longName=[ModuleLongName|EString]?)
	 * </pre>
	 */
	protected void sequence_ModuleDependency(ISerializationContext context, ModuleDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleLongName returns ModuleLongName
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_ModuleLongName(ISerializationContext context, ModuleLongName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Module_managementPackage.Literals.MODULE_LONG_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Module_managementPackage.Literals.MODULE_LONG_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModuleLongNameAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName?
	 *     )
	 * </pre>
	 */
	protected void sequence_Module(ISerializationContext context, org.eclipse.efbt.openregspecs.model.module_management.Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns OneToManyRelationshipAttribute
	 *     OneToManyRelationshipAttribute returns OneToManyRelationshipAttribute
	 *
	 * Constraint:
	 *     (
	 *         isPK?='isPK'? 
	 *         ordered?='ordered'? 
	 *         containment?='containment'? 
	 *         mandatory?='mandatory'? 
	 *         dominant?='dominant'? 
	 *         name=EString 
	 *         classifier=[Classifier|EString]? 
	 *         concept=[Concept|EString]? 
	 *         entity=[Entity|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_OneToManyRelationshipAttribute(ISerializationContext context, OneToManyRelationshipAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns OneToOneRelationshipAttribute
	 *     OneToOneRelationshipAttribute returns OneToOneRelationshipAttribute
	 *
	 * Constraint:
	 *     (
	 *         isPK?='isPK'? 
	 *         ordered?='ordered'? 
	 *         containment?='containment'? 
	 *         mandatory?='mandatory'? 
	 *         dominant?='dominant'? 
	 *         name=EString 
	 *         classifier=[Classifier|EString]? 
	 *         concept=[Concept|EString]? 
	 *         entity=[Entity|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_OneToOneRelationshipAttribute(ISerializationContext context, OneToOneRelationshipAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns ParallelGateway
	 *     FlowNode returns ParallelGateway
	 *     ParallelGateway returns ParallelGateway
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ParallelGateway(ISerializationContext context, ParallelGateway semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns RelationshipAttribute
	 *     RelationshipAttribute_Impl returns RelationshipAttribute
	 *
	 * Constraint:
	 *     (
	 *         isPK?='isPK'? 
	 *         ordered?='ordered'? 
	 *         containment?='containment'? 
	 *         mandatory?='mandatory'? 
	 *         dominant?='dominant'? 
	 *         name=EString 
	 *         classifier=[Classifier|EString]? 
	 *         concept=[Concept|EString]? 
	 *         entity=[Entity|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_RelationshipAttribute_Impl(ISerializationContext context, RelationshipAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequirementType returns RequirementType
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_RequirementType(ISerializationContext context, RequirementType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Requirements_textPackage.Literals.REQUIREMENT_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Requirements_textPackage.Literals.REQUIREMENT_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequirementTypeAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequirementsModule returns RequirementsModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (rules+=TitledRequirementsSection rules+=TitledRequirementsSection*)? 
	 *         allowedtypes=AllowedTypes?
	 *     )
	 * </pre>
	 */
	protected void sequence_RequirementsModule(ISerializationContext context, RequirementsModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequirementsSection returns RequirementsSectionImage
	 *     RequirementsSectionImage returns RequirementsSectionImage
	 *
	 * Constraint:
	 *     (name=EString style=EString? uri=EString?)
	 * </pre>
	 */
	protected void sequence_RequirementsSectionImage(ISerializationContext context, RequirementsSectionImage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequirementsSection returns RequirementsSectionLinkWithText
	 *     RequirementsSectionLinkWithText returns RequirementsSectionLinkWithText
	 *
	 * Constraint:
	 *     (name=EString linkText=EString? subsection=EString? linkedRuleSection=[TitledRequirementsSection|EString]?)
	 * </pre>
	 */
	protected void sequence_RequirementsSectionLinkWithText(ISerializationContext context, RequirementsSectionLinkWithText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequirementsSection returns RequirementsSectionText
	 *     RequirementsSectionText returns RequirementsSectionText
	 *
	 * Constraint:
	 *     (name=EString text=EString?)
	 * </pre>
	 */
	protected void sequence_RequirementsSectionText(ISerializationContext context, RequirementsSectionText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SMCubesCoreModel returns SMCubesCoreModel
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (variableModules+=VariableModule variableModules+=VariableModule*)? 
	 *         (domainModules+=DomainModule domainModules+=DomainModule*)? 
	 *         (memberModules+=MemberModule memberModules+=MemberModule*)? 
	 *         (subDomainModules+=SubDomainModule subDomainModules+=SubDomainModule*)? 
	 *         (memberHierarchyModules+=MemberHierarchyModule memberHierarchyModules+=MemberHierarchyModule*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_SMCubesCoreModel(ISerializationContext context, SMCubesCoreModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SQLEntityModule returns SQLEntityModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (sqlEntities+=SQLEntity sqlEntities+=SQLEntity*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_SQLEntityModule(ISerializationContext context, SQLEntityModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SQLEntity returns SQLEntity
	 *     SQLEntity_Impl returns SQLEntity
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_SQLEntity_Impl(ISerializationContext context, SQLEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Sql_litePackage.Literals.SQL_ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Sql_litePackage.Literals.SQL_ENTITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSQLEntity_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SUBDOMAIN_ENUMERATION returns SUBDOMAIN_ENUMERATION
	 *
	 * Constraint:
	 *     (order=EInt? valid_from=EDate? valid_to=EDate? member_id=[MEMBER|EString]?)
	 * </pre>
	 */
	protected void sequence_SUBDOMAIN_ENUMERATION(ISerializationContext context, SUBDOMAIN_ENUMERATION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SUBDOMAIN returns SUBDOMAIN
	 *
	 * Constraint:
	 *     (
	 *         is_listed?='is_listed'? 
	 *         is_natural?='is_natural'? 
	 *         subdomain_id=EString 
	 *         name=EString? 
	 *         code=EString? 
	 *         description=EString? 
	 *         domain_id=[DOMAIN|EString]? 
	 *         facet_id=[FACET_COLLECTION|EString]? 
	 *         maintenance_agency_id=[MAINTENANCE_AGENCY|EString]? 
	 *         (items+=SUBDOMAIN_ENUMERATION items+=SUBDOMAIN_ENUMERATION*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_SUBDOMAIN(ISerializationContext context, SUBDOMAIN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         name=EString 
	 *         description=EString? 
	 *         (requiredAttributes+=[Attribute|EString] requiredAttributes+=[Attribute|EString]*)? 
	 *         data_constraints=DataConstraint?
	 *     )
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns ScriptTask
	 *     FlowNode returns ScriptTask
	 *     ScriptTask returns ScriptTask
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)? 
	 *         outputLayer=[GeneratedEntity|EString]? 
	 *         (selectionLayers+=SelectionLayer selectionLayers+=SelectionLayer*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ScriptTask(ISerializationContext context, ScriptTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelectClause returns SelectClause
	 *
	 * Constraint:
	 *     (columns+=SelectColumn columns+=SelectColumn*)?
	 * </pre>
	 */
	protected void sequence_SelectClause(ISerializationContext context, SelectClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelectColumn returns SelectColumn
	 *
	 * Constraint:
	 *     (attribute=[Attribute|EString]? as=[Attribute|EString]? memberAsConstant=[EnumMember|EString]?)
	 * </pre>
	 */
	protected void sequence_SelectColumn(ISerializationContext context, SelectColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelectionLayer returns SelectionLayer
	 *
	 * Constraint:
	 *     (invisible?='invisible'? name=EString generatedEntity=[GeneratedEntity|EString]?)
	 * </pre>
	 */
	protected void sequence_SelectionLayer(ISerializationContext context, SelectionLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns SequenceFlow
	 *     SequenceFlow returns SequenceFlow
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         targetRef=[FlowNode|EString]? 
	 *         sourceRef=[FlowNode|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_SequenceFlow(ISerializationContext context, SequenceFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns ServiceTask
	 *     FlowNode returns ServiceTask
	 *     ServiceTask returns ServiceTask
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)? 
	 *         enrichedAttribute=[Attribute|EString]? 
	 *         secondAttribute=[Attribute|EString]? 
	 *         (scenarios+=Scenario scenarios+=Scenario*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ServiceTask(ISerializationContext context, ServiceTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SubDomainModule returns SubDomainModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (subdomains+=SUBDOMAIN subdomains+=SUBDOMAIN*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_SubDomainModule(ISerializationContext context, SubDomainModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns SubProcess
	 *     FlowNode returns SubProcess
	 *     SubProcess returns SubProcess
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)? 
	 *         (flowElements+=FlowElement flowElements+=FlowElement*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_SubProcess(ISerializationContext context, SubProcess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SQLEntity returns Table
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=EString entity=[Entity|EString]?)
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns Task
	 *     FlowNode returns Task
	 *     Task_Impl returns Task
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Task_Impl(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestModule returns TestModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (tests+=Test tests+=Test*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_TestModule(ISerializationContext context, TestModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestScope returns TestScope
	 *     TestScope_Impl returns TestScope
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_TestScope_Impl(ISerializationContext context, TestScope semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestingPackage.Literals.TEST_SCOPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestingPackage.Literals.TEST_SCOPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTestScope_ImplAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (inputData+=[CSVFile|EString] inputData+=[CSVFile|EString]*)? 
	 *         (expectedResult+=[CSVFile|EString] expectedResult+=[CSVFile|EString]*)? 
	 *         scope=TestScope?
	 *     )
	 * </pre>
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequirementsSection returns TitledRequirementsSection
	 *     TitledRequirementsSection returns TitledRequirementsSection
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         title=EString? 
	 *         referencingSections=[RequirementsSectionLinkWithText|EString]? 
	 *         requirementsType=[RequirementType|EString] 
	 *         (sections+=RequirementsSection sections+=RequirementsSection*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_TitledRequirementsSection(ISerializationContext context, TitledRequirementsSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestScope returns UnitTestScope
	 *     UnitTestScope returns UnitTestScope
	 *
	 * Constraint:
	 *     (name=EString scenarios=[Scenario|EString]?)
	 * </pre>
	 */
	protected void sequence_UnitTestScope(ISerializationContext context, UnitTestScope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FlowElement returns UserTask
	 *     FlowNode returns UserTask
	 *     UserTask returns UserTask
	 *
	 * Constraint:
	 *     (
	 *         invisible?='invisible'? 
	 *         id=EString 
	 *         description=EString? 
	 *         name=EString? 
	 *         (outgoing+=[SequenceFlow|EString] outgoing+=[SequenceFlow|EString]*)? 
	 *         (incoming+=[SequenceFlow|EString] incoming+=[SequenceFlow|EString]*)? 
	 *         entity=[BasicEntity|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_UserTask(ISerializationContext context, UserTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VARIABLE returns VARIABLE
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         conceptName=EString? 
	 *         code=EString? 
	 *         description=EString? 
	 *         primary_concept=EString? 
	 *         variable_id=EString? 
	 *         displayName=EString? 
	 *         domain_id=[DOMAIN|EString]? 
	 *         maintenance_agency_id=[MAINTENANCE_AGENCY|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_VARIABLE(ISerializationContext context, VARIABLE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableModule returns VariableModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         theDescription=EString? 
	 *         license=EString? 
	 *         version=EString? 
	 *         dependencies=ModuleDependencies? 
	 *         longName=ModuleLongName? 
	 *         (variables+=VARIABLE variables+=VARIABLE*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_VariableModule(ISerializationContext context, VariableModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SQLEntity returns View
	 *     View returns View
	 *
	 * Constraint:
	 *     (name=EString selectClause=SelectClause? fromClause=FromClause? whereClause=WhereClause?)
	 * </pre>
	 */
	protected void sequence_View(ISerializationContext context, View semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WhereClause returns WhereClause
	 *
	 * Constraint:
	 *     {WhereClause}
	 * </pre>
	 */
	protected void sequence_WhereClause(ISerializationContext context, WhereClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
