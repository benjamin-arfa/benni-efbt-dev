		 package input_layer_entities		 import input_layer_enums.*		 import types.*			class Delta_sensitivity extends Risk_measure {				Currency  Currency_of_record 				double  Delta_sensitivity 				double  Tenor 			}			class Delta_sensitivity_BaseTable {				contains Delta_sensitivity [0..-1] Delta_sensitivitys 			}									class GIRR_risk_factor extends Risk_factor {				GIRR_risk_factor_type  GIRR_risk_factor_type 				Currency  Main_currency 				Currency  Second_currency 			}			class GIRR_risk_factor_BaseTable {				contains GIRR_risk_factor [0..-1] GIRR_risk_factors 			}						class Netted_delta_sensitivities_per_risk_factor_and_tenor_derived {								op String  bucket_id()  				{				 	"<xcore>theRisk_factor.main_currency.literal</xcore>"				}			 	op double  GIRR_delta_risk_weight() 				{				 	 "<xcore>switch tenor {				 						     case tenor == 1.0: 0.14				 							 case tenor == 5.0 : 0.15				 							 default : 1.0				 						  }</xcore>"				}			 	op double  netted_delta_sensitivities() 				{				 	"<xcore>var total_sensitivities = 0.0				 						for (Delta_sensitivity sens : theDelta_sensitivitys) {				 	  						total_sensitivities = total_sensitivities + sens.delta_sensitivity				 						}				 						total_sensitivities</xcore>"				}			 	id String  netted_delta_sensitivities_identifier 			 	op String  netted_delta_sensitivities_identifier() 				{				 	"<xcore>theRisk_factor.risk_factor_Identifier + theDelta_sensitivitys.get(0).tenor.toString</xcore>"				}			 	op double  tenor() 				{				 	"<xcore>theDelta_sensitivitys.get(0).tenor</xcore>"				}			 	op double  weighted_GIRR_delta_sensitivity() 				{				 	"<xcore>GIRR_delta_risk_weight*netted_delta_sensitivities()</xcore>"				}			 	op double  weighted_GIRR_delta_sensitivity_squared() 				{				 	"<xcore>weighted_GIRR_delta_sensitivity*weighted_GIRR_delta_sensitivity</xcore>"				}				refers Delta_sensitivity [0..-1] theDelta_sensitivitys 				refers GIRR_risk_factor [1..1] theRisk_factor 			}			class Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_DerivedTable {				contains Netted_delta_sensitivities_per_risk_factor_and_tenor_derived [0..-1] Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds 				op Netted_delta_sensitivities_per_risk_factor_and_tenor_derived [0..-1]  Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds() {					"<xcore>					var org.eclipse.emf.common.util.EList<Netted_delta_sensitivities_per_risk_factor_and_tenor_derived> Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp = new org.eclipse.emf.common.util.BasicEList<Netted_delta_sensitivities_per_risk_factor_and_tenor_derived>		var map = new java.util.HashMap<String, Netted_delta_sensitivities_per_risk_factor_and_tenor_derived>;				for (GIRR_risk_factor riskfactor: sourceTable2.GIRR_risk_factors)		{				for(Delta_sensitivity sens: sourceTable1.delta_sensitivitys)				{					if (sens.theRisk_factor == riskfactor)					{						var tenor = sens.tenor						var key = riskfactor.toString + tenor.toString						if (!(map.containsKey(key))) 						{							var newItem = Input_layer_entitiesFactory.eINSTANCE.createNetted_delta_sensitivities_per_risk_factor_and_tenor_derived							newItem.theRisk_factor = riskfactor							Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp.add(newItem)							map.put(key,newItem)						} 						var Netted_delta_sensitivities_per_risk_factor_and_tenor_derived1 = map.get(key)						Netted_delta_sensitivities_per_risk_factor_and_tenor_derived1.theDelta_sensitivitys.add(sens)					}				}		}		return Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp				 </xcore>"				}				op String  init() {					"<xcore>xcorelutils.XCoreLUtils.init(this)				 this.netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds.addAll(Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds())  				return null</xcore>"					}				refers Delta_sensitivity_BaseTable  sourceTable1 				refers GIRR_risk_factor_BaseTable  sourceTable2 			}									abstract class Risk_factor {				String  Risk_factor_Identifier 			}			class Risk_factor_BaseTable {				contains Risk_factor [0..-1] Risk_factors 			}			abstract class Risk_measure {				String  Risk_measure_identifier 				refers Risk_factor [1..1] theRisk_factor 				refers Security_or_exchange_tradable_derivative_position [1..1] theSecurity_or_exchange_tradable_derivative_position 			}			class Risk_measure_BaseTable {				contains Risk_measure [0..-1] Risk_measures 			}						class Security_or_exchange_tradable_derivative_position {				String  Position_identifier 			}			class Security_or_exchange_tradable_derivative_position_BaseTable {				contains Security_or_exchange_tradable_derivative_position [0..-1] Security_or_exchange_tradable_derivative_positions 			}