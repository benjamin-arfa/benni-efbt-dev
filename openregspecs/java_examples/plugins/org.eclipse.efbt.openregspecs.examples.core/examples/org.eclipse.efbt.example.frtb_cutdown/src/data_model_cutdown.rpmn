
		 /**  "Copyright (c) 2020 Bird Software Solutions Ltd
 All rights reserved. This file and the accompanying materials are made available under the terms of the Eclipse Public License v2.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v20.html

SPDX-License-Identifier: EPL-2.0 

 Contributors:
 Neil Mackenzie - initial API and implementation */
 
 		package bird   
			
			class Delta_sensitivity extends Risk_measure {
				Currency  Currency_of_record 
				Double  Delta_sensitivity 
				Double  Tenor 
			}
			class Delta_sensitivity_BaseTable {
				contains Delta_sensitivity [0..-1] Delta_sensitivitys 
			}
			
			
			class GIRR_risk_factor extends Risk_factor {
				GIRR_risk_factor_type  GIRR_risk_factor_type 
				Currency  Main_currency 
				Currency  Second_currency 
			}
			class GIRR_risk_factor_BaseTable {
				contains GIRR_risk_factor [0..-1] GIRR_risk_factors 
			}
			
			class Netted_delta_sensitivities_per_risk_factor_and_tenor_derived {
				
				op String  bucket_id()  
				{
				 	"theRisk_factor.main_currency.literal"
				}
			 	op Double  GIRR_delta_risk_weight() 
				{
				 	 "switch tenor {
				 						     case tenor == 1.0: 0.14
				 							 case tenor == 5.0 : 0.15
				 							 default : 1.0
				 						  }"
				}
			 	op Double  netted_delta_sensitivities() 
				{
				 	"var total_sensitivities = 0.0
				 						for (Delta_sensitivity sens : theDelta_sensitivitys) {
				 	  						total_sensitivities = total_sensitivities + sens.delta_sensitivity
				 						}
				 						total_sensitivities"
				}
			 	id String  netted_delta_sensitivities_identifier 
			 	op String  netted_delta_sensitivities_identifier() 
				{
				 	"theRisk_factor.risk_factor_Identifier + theDelta_sensitivitys.get(0).tenor.toString"
				}
			 	op Double  tenor() 
				{
				 	"theDelta_sensitivitys.get(0).tenor"
				}
			 	op Double  weighted_GIRR_delta_sensitivity() 
				{
				 	"GIRR_delta_risk_weight*netted_delta_sensitivities()"
				}
			 	op Double  weighted_GIRR_delta_sensitivity_squared() 
				{
				 	"weighted_GIRR_delta_sensitivity*weighted_GIRR_delta_sensitivity"
				}
				refers Delta_sensitivity [0..-1] theDelta_sensitivitys 
				refers GIRR_risk_factor [1..1] theRisk_factor 
			}
			class Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_DerivedTable {
				contains Netted_delta_sensitivities_per_risk_factor_and_tenor_derived [0..-1] Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds 
				op Netted_delta_sensitivities_per_risk_factor_and_tenor_derived [0..-1]  Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds() {
					"
					var org.eclipse.emf.common.util.EList<Netted_delta_sensitivities_per_risk_factor_and_tenor_derived> Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp = new org.eclipse.emf.common.util.BasicEList<Netted_delta_sensitivities_per_risk_factor_and_tenor_derived>
		var map = new java.util.HashMap<String, Netted_delta_sensitivities_per_risk_factor_and_tenor_derived>;		
		for (GIRR_risk_factor riskfactor: sourceTable2.GIRR_risk_factors)
		{
				for(Delta_sensitivity sens: sourceTable1.delta_sensitivitys)
				{
					if (sens.theRisk_factor == riskfactor)
					{
						var tenor = sens.tenor
						var key = riskfactor.toString + tenor.toString
						if (!(map.containsKey(key))) 
						{
							var newItem = BirdFactory.eINSTANCE.createNetted_delta_sensitivities_per_risk_factor_and_tenor_derived
							newItem.theRisk_factor = riskfactor
							Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp.add(newItem)
							map.put(key,newItem)
						} 
						var Netted_delta_sensitivities_per_risk_factor_and_tenor_derived1 = map.get(key)
						Netted_delta_sensitivities_per_risk_factor_and_tenor_derived1.theDelta_sensitivitys.add(sens)
					}
				}
		}
		return Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp
				 "
				}
				refers Delta_sensitivity_BaseTable  sourceTable1 
				refers GIRR_risk_factor_BaseTable  sourceTable2 
			}
			
			class OUTPUT_LAYER_FRTB {
				op Approach_For_Prudential_Purposes  Approach_For_Prudential_Purposes() { }
				op Base  Base(){ } 
				op Contingent_Scenario  Contingent_Scenario() { }
				op Delta_Vega_Or_Curvature_Risk  Delta_Vega_Or_Curvature_Risk() { } 
				op Boolean  Hypothetical_Value_Under_Specific_Assumptions() { } 
				op Instrument  Instrument() { }
				op Main_Catagory  Main_Catagory() { } 
				op Market_Risk_Portfolio  Market_Risk_Portfolio() { } 
				op Double  Own_Funds_Requirements() { } 
				op Position_In_The_Instrument  Position_In_The_Instrument() { } 
				op Prudential_Portfolio  Prudentia_lPortfolio() { } 
				op Double  Sensitivity_To_Delta_Risk_Factors() { } 
				op Type_And_Nature_Of_Sensitivity  Type_And_Nature_Of_Sensitivity() { } 
				op Type_Of_Risk  Type_Of_Risk() { } 
			}
			abstract class Risk_factor {
				String  Risk_factor_Identifier 
			}
			class Risk_factor_BaseTable {
				contains Risk_factor [0..-1] Risk_factors 
			}
			abstract class Risk_measure {
				String  Risk_measure_identifier 
				refers Risk_factor [1..1] theRisk_factor 
				refers Security_or_exchange_tradable_derivative_position [1..1] theSecurity_or_exchange_tradable_derivative_position 
			}
			class Risk_measure_BaseTable {
				contains Risk_measure [0..-1] Risk_measures 
			}
			
			class Security_or_exchange_tradable_derivative_position {
				String  Position_identifier 
			}
			class Security_or_exchange_tradable_derivative_position_BaseTable {
				contains Security_or_exchange_tradable_derivative_position [0..-1] Security_or_exchange_tradable_derivative_positions 
			}
			
			enum Approach_For_Prudential_Purposes {  NA as "NA" = 1 Sensitivities_Based_Method as "Sensitivities_Based_Method" = 2 Method_To_Determine_The_Default_Risk_Charge as "Method_To_Determine_The_Default_Risk_Charge" = 3 Method_To_Determine_The_Residual_Risk_Charge as "Method_To_Determine_The_Residual_Risk_Charge" = 4 }
			enum Base {  NA as "NA" = 5 Memorandum_Items as "Memorandum_Items" = 6 Exposures as "Exposures" = 7 }
			enum Boolean {  }
			enum Commodity_type {  NA as "NA" = 8 Energy_solid_combustables as "Energy_solid_combustables" = 9 Softs_and_other_agriculturals as "Softs_and_other_agriculturals" = 10 Other_commodity as "Other_commodity" = 11 Energy_liquid_combustables as "Energy_liquid_combustables" = 12 Energy_electricity_and_carbon_trading as "Energy_electricity_and_carbon_trading" = 13 Freight as "Freight" = 14 Metals_non_precious as "Metals_non_precious" = 15 Gaseous_combustables as "Gaseous_combustables" = 16 Precious_metals as "Precious_metals" = 17 Grains_and_oilseed as "Grains_and_oilseed" = 18 Livestock_and_dairy as "Livestock_and_dairy" = 19 }
			enum Contingent_Scenario {  NA as "NA" = 20 Low_Correlation_Scenario as "Low_Correlation_Scenario" = 21 Medium_Correlation_Scenario as "Medium_Correlation_Scenario" = 22 High_Correlation_Scenario as "High_Correlation_Scenario" = 23 }
			enum CSR_curve_type {  NA as "NA" = 24 Bond as "Bond" = 25 CDS as "CDS" = 26 }
			enum Currency {  NA as "NA" = 27 EUR as "EUR" = 28 JYP as "JYP" = 29 USD as "USD" = 30 }
			enum Delta_Vega_Or_Curvature_Risk {  NA as "NA" = 31 Delta_Risk as "Delta_Risk" = 32 Vega_Risk as "Vega_Risk" = 33 Curvature_Risk as "Curvature_Risk" = 34 }
			enum Economy {  NA as "NA" = 35 Emerging_market as "Emerging_market" = 36 Advanced_economy as "Advanced_economy" = 37 }
			enum Equity_factor_type {  NA as "NA" = 38 Spot as "Spot" = 39 Repo as "Repo" = 40 }
			enum GIRR_risk_factor_type {  NA as "NA" = 41 Inflation as "Inflation" = 42 Basis as "Basis" = 43 Yield as "Yield" = 44 }
			enum Instrument {  NA as "NA" = 45 Instruments_Other_Than_Securitisation_Positions as "Instruments_Other_Than_Securitisation_Positions" = 46 Securitisation_Positions as "Securitisation_Positions" = 47 Instruments_With_Exotic_Underlyings as "Instruments_With_Exotic_Underlyings" = 48 Alternative_Correlation_Trading_Portfolio as "Alternative_Correlation_Trading_Portfolio" = 49 }
			enum Main_Catagory {  NA as "NA" = 50 Instruments_Subject_To_Market_Risk as "Instruments_Subject_To_Market_Risk" = 51 }
			enum Market_cap {  NA as "NA" = 52 Large as "Large" = 53 Small as "Small" = 54 }
			enum Market_Risk_Portfolio {  NA as "NA" = 55 Non_ACTP as "Non_ACTP" = 56 ACTP as "ACTP" = 57 }
			enum Number {  }
			enum Position_In_The_Instrument {  NA as "NA" = 58 Long_Position as "Long_Position" = 59 Short_Position as "Short_Position" = 60 }
			enum Prudential_Portfolio {  NA as "NA" = 61 Trading_Book as "Trading_Book" = 62 Banking_And_Trading_Book as "Banking_And_Trading_Book" = 63 }
			enum Rating_grade {  NA as "NA" = 64 Senior_IG as "Senior_IG" = 65 Non_senior_IG as "Non_senior_IG" = 66 High_yield as "High_yield" = 67 Non_rated as "Non_rated" = 68 IG as "IG" = 69 }
			enum Sector {  NA as "NA" = 70 Sovereign as "Sovereign" = 71 Local_government as "Local_government" = 72 Financials as "Financials" = 73 Basic_materials as "Basic_materials" = 74 Consumer_goods as "Consumer_goods" = 75 Technology as "Technology" = 76 Health_care as "Health_care" = 77 Covered_bonds as "Covered_bonds" = 78 Other_sector as "Other_sector" = 79 }
			enum Securitisation_sector {  NA as "NA" = 80 RMBS_prime as "RMBS_prime" = 81 RMBS_mid_pirme as "RMBS_mid_pirme" = 82 RMBS_sub_prime as "RMBS_sub_prime" = 83 CMBS as "CMBS" = 84 ABS_student_loan as "ABS_student_loan" = 85 ABS_auto as "ABS_auto" = 86 CLO_non_CTP as "CLO_non_CTP" = 87 Other_securitisation_sector as "Other_securitisation_sector" = 88 }
			enum ShockDirection {  NA as "NA" = 89 Up as "Up" = 90 Down as "Down" = 91 }
			enum String_up_to_60_characters_limited_to_letters__capital_and_low_cases___numbers__dash_and_underscore {  }
			enum String_up_to_60_characters_limited_to_letters__capital_and_low_cases___numbers__dash_and_underscore_1 {  }
			enum Type_And_Nature_Of_Sensitivity {  NA as "NA" = 92 Positive_Sensitivity_Gross_Per_Risk_Class_Unweighted as "Positive_Sensitivity_Gross_Per_Risk_Class_Unweighted" = 93 Negative_Sensitivity_Gross_Per_Risk_Class_Unweighted as "Negative_Sensitivity_Gross_Per_Risk_Class_Unweighted" = 94 Sensitivity_Net_Per_Risk_Class_Unweighted as "Sensitivity_Net_Per_Risk_Class_Unweighted" = 95 }
			enum Type_Of_Risk {  NA as "NA" = 96 GIRR as "GIRR" = 97 Equity_Risk as "Equity_Risk" = 98 Foreign_Exchange_Risk as "Foreign_Exchange_Risk" = 99 Commodity_Risk as "Commodity_Risk" = 100 CSR as "CSR" = 101 Default_Risk as "Default_Risk" = 102 Residual_Risk as "Residual_Risk" = 103 }
			enum Unknown {  }
			type Double wraps Double
			type String wraps String

