/*
 * generated by Xtext 2.35.0
 */
package org.eclipse.efbt.regdna.dsl.generator

/**Copyright (c) 2020 Bird Software Solutions Ltd
 *  All rights reserved. This file and the accompanying materials are made available under the terms of the Eclipse Public License v2.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v20.html

 * SPDX-License-Identifier: EPL-2.0 

 *  Contributors:
 Neil Mackenzie - initial API and implementation*/


import org.eclipse.efbt.regdna.model.regdna.regdnaPackage

import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EEnum
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EReference
import sdd_model.Sdd_modelPackage




/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EcoreToDJangoGenerator {

	def static main(String[] args)
	{
		System.out.println(createDjangoForPackage(Sdd_modelPackage.eINSTANCE))
		System.out.println(createDjangoAdminForPackage(Sdd_modelPackage.eINSTANCE))
		System.out.println(createDjangoForPackage(regdnaPackage.eINSTANCE))
		System.out.println(createDjangoAdminForPackage(regdnaPackage.eINSTANCE))
	}
 	
 	
	
	def static createDjangoAdminForPackage(EPackage epackage)
		 '''
		
		from django.contrib import admin

		«FOR elclass : epackage.EClassifiers.filter(EClass)»
		from .models import «elclass.name»				
		admin.site.register(«elclass.name»)
		«ENDFOR»
		        '''
		         
	
		         
	def static createDjangoForPackage(EPackage epackage)'''
		
		from django.db import models
		
		«FOR eclass : epackage.EClassifiers.filter(EClass)»
		«IF eclass.ESuperTypes.size > 0»
				
		class «eclass.name»(«eclass.ESuperTypes.get(0).name»):
		«ELSE»
				
		class «eclass.name»(models.Model):
		«ENDIF»
		
		«FOR emember : eclass.EStructuralFeatures»  

		«IF emember instanceof EAttribute» 
		«IF emember.EAttributeType instanceof EEnum»    «(emember.EAttributeType as EEnum).djangoChoices»«ENDIF» 
		    «emember.name» = «emember.djangoType()»   «ENDIF»
		«IF emember instanceof EReference»    «emember.name» = models.ForeignKey("«emember.EType.name»", models.SET_NULL,blank=True,null=True,)«ENDIF» 
		«ENDFOR»
		    class Meta:
		        verbose_name = '«eclass.name»'
		        verbose_name_plural = '«eclass.name»s'
		«ENDFOR»
		
	
		        '''
	
	def static String djangoChoices(EEnum theEnum)
	{
		var returnString = theEnum.name + " = {"

		for (literal : theEnum.ELiterals) {
			returnString  = returnString  + "\""+ literal.literal + "\":\""+literal.name + "\",\n"
		}
	    
		returnString  = returnString  + "}"
		return returnString
	}
	
	def static djangoType(EAttribute attribute) {
		val type = attribute.EAttributeType
		val pk = attribute.ID
		var display_name = attribute.name
		
	
		if (type instanceof EEnum)
			return "models.CharField(\"" + display_name + "\",max_length=255, choices=" + type.name +",default=None, blank=True, null=True)"
		else if ((type.name == "EString") && pk)
			return "models.CharField(\"" + display_name + "\",max_length=255, primary_key=True)"
		else if (type.name == "EString")
			return "models.CharField(\"" + display_name + "\",max_length=255,default=None, blank=True, null=True)"
		else if (type.name == "EDouble")
			return "models.FloatField(\"" + display_name + "\",default=None, blank=True, null=True)"
		else if (type.name == "EInt")
			return "models.BigIntegerField(\"" + display_name + "\",default=None, blank=True, null=True)"
		else if (type.name == "EDate")
			return "models.DateTimeField(\"" + display_name + "\",default=None, blank=True, null=True)"
		else if (type.name == "EBoolean")
			return "models.BooleanField(\"" + display_name + "\",default=None, blank=True, null=True)"
	}
	
	}


