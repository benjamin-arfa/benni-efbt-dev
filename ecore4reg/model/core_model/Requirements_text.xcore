@xcore.lang.Ecore(nsURI="http://www.eclipse.org/efbt/requirements_text")
@xcore.lang.GenModel(documentation="This package describes the classes for storing Structured Requirements text\n ",
	modelDirectory="/org.eclipse.efbt.ecore4reg.model.core_model/src",
	editDirectory="/org.eclipse.efbt.ecore4reg.model.core_model.edit/src",
	editorDirectory="/org.eclipse.efbt.ecore4reg.model.core_model.editor/src", modelName="Ecore4reg",
	editPluginClass="ecore_lite.provider.Ecore4regEditPlugin",
	editorPluginClass="ecore_lite.presentation.Ecore4regEditorPlugin",
	testsDirectory="/org.eclipse.efbt.ecore4reg.model.core_model.tests/src",
	testSuiteClass="ecore_lite.tests.Ecore4regAllTests", importerID="org.eclipse.emf.importer.ecore",
	containmentProxies="false", editorPluginID="org.eclipse.efbt.ecore4reg.model.core_model.editor",
	testsPluginID="org.eclipse.efbt.ecore4reg.model.core_model.tests")
@License(license="Copyright (c) 2019 Bird Software Solutions Ltd\n All rights reserved. This file and the accompanying materials are made available under the terms of the Eclipse Public License v2.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v20.html\n\nSPDX-License-Identifier: EPL-2.0 \n\n Contributors:\n Neil Mackenzie - initial API and implementation\r")
package requirements_text

import module_management.Module

annotation "license" as License

@xcore.lang.GenModel(documentation="Allowed Types  like article, chapter, rulebook")
class AllowedTypes {
	@xcore.lang.GenModel(documentation="A set of Allowed types, like article, chapter, rulebook")
	contains RequirementType[] allowedTypes
}

@xcore.lang.GenModel(documentation="A Module containing a Set of Requirements")
class RequirementsModule extends module_management.Module {
	@xcore.lang.GenModel(documentation="A set of top level titled requirement sections")
	contains TitledRequirementsSection[] rules
	@xcore.lang.GenModel(documentation="a set of Allowed types, like article, chapter, rulebook")
	contains AllowedTypes allowedtypes
}

@xcore.lang.GenModel(documentation="A Requirements Section")
abstract class RequirementsSection {
	@xcore.lang.GenModel(documentation="The name of the requirements Section")
	id String name
}

@xcore.lang.GenModel(documentation="A Requirements Section represented by an image")
class RequirementsSectionImage extends RequirementsSection {
	@xcore.lang.GenModel(documentation="the style string including width and height")
	String style
	@xcore.lang.GenModel(documentation="the location of the image file")
	String uri
}

@xcore.lang.GenModel(documentation="This is similar to the HTML idea of a HyperLink. It contains some text to be shown as part of the Requirement,\n      and contains a link to another TitledRequirementsSection in the Requirements. This helps natural navigation of\n      A requirements document which has  multiple cross references between sections")
class RequirementsSectionLinkWithText extends RequirementsSection {
	@xcore.lang.GenModel(documentation="The linked  titled requirements section")
	refers TitledRequirementsSection linkedRuleSection opposite referencingSections
	@xcore.lang.GenModel(documentation="The text that refers to the linked RequirementsSection, like \"Article 321\" ")
	String linkText
	@xcore.lang.GenModel(documentation="Other Text")
	String subsection
}

@xcore.lang.GenModel(documentation="A section of text")
class RequirementsSectionText extends RequirementsSection {
	@xcore.lang.GenModel(documentation="The text")
	String text
}

@xcore.lang.GenModel(documentation="A requirement type such as Article, Chapter, Rulebook")
class RequirementType {
	@xcore.lang.GenModel(documentation="the name of the requirement type")
	id String[1] name
}

@xcore.lang.GenModel(documentation="A Requirements Section which has a title, such as an Article 321 or  Chapter 5.\n       Note that this contains other requirements sections, which could in turn be other TitledRequirementsSections ")
class TitledRequirementsSection extends RequirementsSection {
	@xcore.lang.GenModel(documentation="The sections contained in the titled section")
	contains RequirementsSection[] sections
	@xcore.lang.GenModel(documentation=" other requirement sections that link to this one (Optional)")
	refers RequirementsSectionLinkWithText referencingSections opposite linkedRuleSection
	@xcore.lang.GenModel(documentation="The type, from allowed types, such as Article, Chapter,Rulebook etc")
	refers RequirementType[1] requirementsType
	@xcore.lang.GenModel(documentation="the title of the requirements section")
	String title
}

@xcore.lang.GenModel(documentation="A Tag for linking things to Requirements, This is Subclassed per thing , e.g. ScenarioTag will link a Scenario to requirements.")
class Tag {
	@xcore.lang.GenModel(documentation="the tags display name.")
	String displayName
	@xcore.lang.GenModel(documentation="the tags name, which is also its unique id")
	id String name
	@xcore.lang.GenModel(documentation="the tags name, which is also its unique id")
	refers TitledRequirementsSection[] requirements
}

@xcore.lang.GenModel(documentation="A group of Tags")
class TagGroup extends module_management.Module {
	@xcore.lang.GenModel(documentation="the tags")
	contains Tag[] tags
}