		 package output_tables		 /**Copyright (c) 2020 Bird Software Solutions Ltd All rights reserved. This file and the accompanying materials are made available under the terms of the Eclipse Public License v2.0 which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v20.htmlSPDX-License-Identifier: EPL-2.0  Contributors: Neil Mackenzie - initial API and implementation*/ 		 import sdd_domains.*		 import sdd_domains.*		 import types.*		 import C91_REFoutput_logic.*		 class C91_REF_OutputItem {		 		refers C91_REF_Output_Layer_UnionItem  unionOfLayers 				op Approach_For_Prudential_Purposes  Approach_For_Prudential_Purposes() { 					"<xcore>unionOfLayers.Approach_For_Prudential_Purposes()</xcore>"				}				op Base  Base(){					"<xcore>unionOfLayers.Base()</xcore>"				 } 				op Contingent_Scenario  Contingent_Scenario() { 					"<xcore>unionOfLayers.Contingent_Scenario()</xcore>"				}				op Delta_Vega_Or_Curvature_Risk  Delta_Vega_Or_Curvature_Risk() {					"<xcore>unionOfLayers.Delta_Vega_Or_Curvature_Risk()</xcore>"				 } 				op boolean  Hypothetical_Value_Under_Specific_Assumptions() { 					"<xcore>unionOfLayers.Hypothetical_Value_Under_Specific_Assumptions()</xcore>"				} 				op Instrument  Instrument() {					"<xcore>unionOfLayers.Instrument()</xcore>"				 }				op Main_Catagory  Main_Catagory() { 					"<xcore>unionOfLayers.Main_Catagory()</xcore>"				} 				op Market_Risk_Portfolio  Market_Risk_Portfolio() { 					"<xcore>unionOfLayers.Market_Risk_Portfolio()</xcore>"				} 				op double  Own_Funds_Requirements() { 					"<xcore>unionOfLayers.Own_Funds_Requirements()</xcore>"				} 				op Position_In_The_Instrument  Position_In_The_Instrument() { 					"<xcore>unionOfLayers.Position_In_The_Instrument()</xcore>"				} 				op Prudential_Portfolio  Prudentia_lPortfolio() { 					"<xcore>unionOfLayers.Prudentia_lPortfolio()</xcore>"				} 				op double  Sensitivity_To_Delta_Risk_Factors() { 					"<xcore>unionOfLayers.Sensitivity_To_Delta_Risk_Factors()</xcore>"				} 				op Type_And_Nature_Of_Sensitivity  Type_And_Nature_Of_Sensitivity() {					"<xcore>unionOfLayers.Type_And_Nature_Of_Sensitivity()</xcore>"				 } 				op Type_Of_Risk  Type_Of_Risk() { 					"<xcore>unionOfLayers.Type_Of_Risk()</xcore>"				} 			}						class C91_REF_OutputTable {				refers  C91_REF_Output_Layer_UnionTable  unionOfLayersTable				contains  C91_REF_OutputItem [0..-1] C91_REF_OutputItems 				op  C91_REF_OutputItem [0..-1] C91_REF_OutputItems() {					"<xcore>var items = new org.eclipse.emf.common.util.BasicEList<C91_REF_OutputItem >()				for( C91_REF_Output_Layer_UnionItem item : unionOfLayersTable.c91_REF_Output_Layer_UnionItems)				{					var newItem = Output_tablesFactory.eINSTANCE.createC91_REF_OutputItem					newItem.unionOfLayers =  item					items.add(newItem)}				return items</xcore>"					} 				op String  init() {					"<xcore>ecore4regutils.Orchestration.init(this)				 this.c91_REF_OutputItems.addAll(C91_REF_OutputItems())  				return null</xcore>"					} 				 			}