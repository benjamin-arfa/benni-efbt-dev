
package input_tables

import il_domains.* 

class Delta_sensitivity  extends Risk_measure {
 	Currency  Currency_of_record 
 	double  Delta_sensitivity 
 	double  Tenor 
}
class Delta_sensitivity_BaseTable {
 	contains  Delta_sensitivity []   Delta_sensitivitys	
}
class GIRR_risk_factor  extends Risk_factor {
 	GIRR_risk_factor_type  GIRR_risk_factor_type 
 	Currency  Main_currency 
 	Currency  Second_currency 
}
class GIRR_risk_factor_BaseTable {
 	contains  GIRR_risk_factor []   GIRR_risk_factors	
}
class Netted_delta_sensitivities_per_risk_factor_and_tenor_derived {
 	refers Delta_sensitivity []   theDelta_sensitivitys	
 	refers GIRR_risk_factor [1..1] theRisk_factor	
 	op String  bucket_id()
	{
          theRisk_factor.main_currency.literal
	}
 	op double  GIRR_delta_risk_weight()
	{
          switch tenor {
				 						     case tenor == 1.0: 0.14
				 							 case tenor == 5.0 : 0.15
				 							 default : 1.0
				 						  }
	}
 	op double  netted_delta_sensitivities()
	{
          var total_sensitivities = 0.0
				 						for (Delta_sensitivity sens : theDelta_sensitivitys) {
				 	  						total_sensitivities = total_sensitivities + sens.delta_sensitivity
				 						}
				 						total_sensitivities
	}
 	op String  netted_delta_sensitivities_identifier()
	{
          theRisk_factor.risk_factor_Identifier + theDelta_sensitivitys.get(0).tenor.toString
	}
 	op double  tenor()
	{
          theDelta_sensitivitys.get(0).tenor
	}
 	op double  weighted_GIRR_delta_sensitivity()
	{
          GIRR_delta_risk_weight*netted_delta_sensitivities()
	}
 	op double  weighted_GIRR_delta_sensitivity_squared()
	{
          weighted_GIRR_delta_sensitivity*weighted_GIRR_delta_sensitivity
	}
}
class Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_DerivedTable {
 	refers Delta_sensitivity_BaseTable  sourceTable1	
 	refers GIRR_risk_factor_BaseTable  sourceTable2	
 	contains  Netted_delta_sensitivities_per_risk_factor_and_tenor_derived []   Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds	
 	op Netted_delta_sensitivities_per_risk_factor_and_tenor_derived []   Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds()
	{
          
					var org.eclipse.emf.common.util.EList<Netted_delta_sensitivities_per_risk_factor_and_tenor_derived> Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp = new org.eclipse.emf.common.util.BasicEList<Netted_delta_sensitivities_per_risk_factor_and_tenor_derived>
		var map = new java.util.HashMap<String, Netted_delta_sensitivities_per_risk_factor_and_tenor_derived>;		
		for (GIRR_risk_factor riskfactor: sourceTable2.GIRR_risk_factors)
		{
				for(Delta_sensitivity sens: sourceTable1.delta_sensitivitys)
				{
					if (sens.theRisk_factor == riskfactor)
					{
						var tenor = sens.tenor
						var key = riskfactor.toString + tenor.toString
						if (!(map.containsKey(key))) 
						{
							var newItem = Input_tablesFactory.eINSTANCE.createNetted_delta_sensitivities_per_risk_factor_and_tenor_derived
							newItem.theRisk_factor = riskfactor
							Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp.add(newItem)
							map.put(key,newItem)
						} 
						var Netted_delta_sensitivities_per_risk_factor_and_tenor_derived1 = map.get(key)
						Netted_delta_sensitivities_per_risk_factor_and_tenor_derived1.theDelta_sensitivitys.add(sens)
					}
				}
		}
		return Netted_delta_sensitivities_per_risk_factor_and_tenor_derived_temp
	}
 	op String  init()
	{
          ecore4regutils.Orchestration.init(this)
				 this.netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds.addAll(Netted_delta_sensitivities_per_risk_factor_and_tenor_deriveds()) 
 				return null
	}
}
abstract class Risk_factor {
 	String  Risk_factor_Identifier 
}
class Risk_factor_BaseTable {
 	contains  Risk_factor []   Risk_factors	
}
abstract class Risk_measure {
 	String  Risk_measure_identifier 
 	refers Risk_factor [1..1] theRisk_factor	
 	refers Security_or_exchange_tradable_derivative_position [1..1] theSecurity_or_exchange_tradable_derivative_position	
}
class Risk_measure_BaseTable {
 	contains  Risk_measure []   Risk_measures	
}
class Security_or_exchange_tradable_derivative_position {
 	String  Position_identifier 
}
class Security_or_exchange_tradable_derivative_position_BaseTable {
 	contains  Security_or_exchange_tradable_derivative_position []   Security_or_exchange_tradable_derivative_positions	
}
