
package output_tables

import sdd_domains.* 

import il_domains.* 


import C91_REFoutput_logic.* 
class C91_REF_OutputItem {
 	refers C91_REF_Output_Layer_UnionItem  unionOfLayers	
 	op Approach_For_Prudential_Purposes  Approach_For_Prudential_Purposes()
	{
          unionOfLayers.Approach_For_Prudential_Purposes()
	}
 	op Base  Base()
	{
          unionOfLayers.Base()
	}
 	op Contingent_Scenario  Contingent_Scenario()
	{
          unionOfLayers.Contingent_Scenario()
	}
 	op Delta_Vega_Or_Curvature_Risk  Delta_Vega_Or_Curvature_Risk()
	{
          unionOfLayers.Delta_Vega_Or_Curvature_Risk()
	}
 	op boolean  Hypothetical_Value_Under_Specific_Assumptions()
	{
          unionOfLayers.Hypothetical_Value_Under_Specific_Assumptions()
	}
 	op Instrument  Instrument()
	{
          unionOfLayers.Instrument()
	}
 	op Main_Catagory  Main_Catagory()
	{
          unionOfLayers.Main_Catagory()
	}
 	op Market_Risk_Portfolio  Market_Risk_Portfolio()
	{
          unionOfLayers.Market_Risk_Portfolio()
	}
 	op double  Own_Funds_Requirements()
	{
          unionOfLayers.Own_Funds_Requirements()
	}
 	op Position_In_The_Instrument  Position_In_The_Instrument()
	{
          unionOfLayers.Position_In_The_Instrument()
	}
 	op Prudential_Portfolio  Prudentia_lPortfolio()
	{
          unionOfLayers.Prudentia_lPortfolio()
	}
 	op double  Sensitivity_To_Delta_Risk_Factors()
	{
          unionOfLayers.Sensitivity_To_Delta_Risk_Factors()
	}
 	op Type_And_Nature_Of_Sensitivity  Type_And_Nature_Of_Sensitivity()
	{
          unionOfLayers.Type_And_Nature_Of_Sensitivity()
	}
 	op Type_Of_Risk  Type_Of_Risk()
	{
          unionOfLayers.Type_Of_Risk()
	}
}
class C91_REF_OutputTable {
 	refers C91_REF_Output_Layer_UnionTable  unionOfLayersTable	
 	contains  C91_REF_OutputItem []   C91_REF_OutputItems	
 	op C91_REF_OutputItem []   C91_REF_OutputItems()
	{
          var items = new org.eclipse.emf.common.util.BasicEList<C91_REF_OutputItem >()
				for( C91_REF_Output_Layer_UnionItem item : unionOfLayersTable.c91_REF_Output_Layer_UnionItems)
				{
					var newItem = Output_tablesFactory.eINSTANCE.createC91_REF_OutputItem
					newItem.unionOfLayers =  item
					items.add(newItem)
}
				return items
	}
 	op String  init()
	{
          ecore4regutils.Orchestration.init(this) 
				 this.c91_REF_OutputItems.addAll(C91_REF_OutputItems()) 
 				return null
	}
}
