@xcore.lang.Ecore(nsURI="http://www.eclipse.org/efbt/ecore4reg")
@xcore.lang.GenModel(modelDirectory="/org.eclipse.efbt.ecore4reg.model/src",
	editDirectory="/org.eclipse.efbt.ecore4reg.model.edit/src",
	editorDirectory="/org.eclipse.efbt.ecore4reg.model.editor/src",
	editPluginClass="org.eclipse.efbt.ecore4reg.model.ecore4reg.provider.Ecore4regEditPlugin",
	editorPluginClass="org.eclipse.efbt.ecore4reg.model.ecore4reg.presentation.Ecore4regEditorPlugin",
	testsDirectory="/org.eclipse.efbt.ecore4reg.model.tests/src",
	testSuiteClass="org.eclipse.efbt.ecore4reg.model.ecore4reg.tests.Ecore4regAllTests",
	importerID="org.eclipse.emf.importer.ecore", containmentProxies="false",
	editorPluginID="org.eclipse.efbt.ecore4reg.model.editor", testsPluginID="org.eclipse.efbt.ecore4reg.model.tests",
	pluginKey="", resource="XMI", loadInitialization="true", literalsInterface="false")
package org.eclipse.efbt.ecore4reg.model.ecore4reg

class Import {
	String importedNamespace
}

class Module {
	@xcore.lang.GenModel(property="None", notify="true", children="true", createChild="true",
		propertySortChoices="false")
	refers Module[] dependencies
	String theDescription
	String license
	id String name
	String version
	contains Import[] imports
}

class ModuleList {
	contains Module[] modules
}

class AllowedTypes {
	contains RequirementType[] allowedTypes
}

class RequirementsModule extends Module {
	contains TitledRequirementsSection[] rules
	contains AllowedTypes allowedtypes
}

abstract class RequirementsSection {
	id String name
}

class RequirementsSectionImage extends RequirementsSection {
	String style
	String uri
}

class RequirementsSectionLinkWithText extends RequirementsSection {
	refers TitledRequirementsSection linkedRuleSection opposite referencingSections
	String linkText
	String subsection
}

class RequirementsSectionText extends RequirementsSection {
	String text
}

class RequirementType {
	id String[1] name
}

class TitledRequirementsSection extends RequirementsSection {
	contains RequirementsSection[] sections
	refers RequirementsSectionLinkWithText referencingSections opposite linkedRuleSection
	refers RequirementType[1] requirementsType
	String title
}

class Tag {
	String displayName
	id String name
	refers TitledRequirementsSection[] requirements
}

class TagGroup extends Module {
	contains Tag[] tags
}

class View {
	id String name
	refers ELClass outputLayer
	contains LayerSQL[] selectionLayerSQL
}

class LayerSQL {
	@xcore.lang.GenModel(property="Editable", notify="false", children="false", createChild="false",
		propertySortChoices="true")
	contains SelectionLayer selectionLayer
	contains SelectColumn[] columns
	contains WhereClause[] whereClause
}

class SelectClause {
}

class SelectColumn {
	refers ELOperation asAttribute
}

class SelectColumnMemberAs extends SelectColumn {
	refers ELEnumLiteral memberAsConstant
}

class SelectValueAs extends SelectColumn {
	String value
}

class SelectColumnAttributeAs extends SelectColumn {
	refers ELAttribute attribute
}

enum Comparitor {
	less_than
	equals
	greater_than
}

class WhereClause {
	refers ELAttribute attribute1
	Comparitor comparitor
	refers ELEnumLiteral member
	String value
}

class ViewModule extends Module {
	contains View[] views
}

class SelectionLayer {
	id String name
}

class ELAttribute extends ELStructuralFeature {
	boolean iD
	refers ELDataType eAttributeType
}

class ELClass extends ELClassifier {
	boolean ^abstract
	@xcore.lang.GenModel(suppressedIsSetVisibility="true", suppressedUnsetVisibility="true")
	refers unsettable ELClass[] eSuperTypes
	contains ELStructuralFeature[] eStructuralFeatures
	contains ELOperation[] eOperations
}

abstract class ELClassifier extends ELNamedElement {
	@xcore.lang.GenModel(property="Readonly")
	container readonly transient ELPackage ^package opposite eClassifiers
}

class ELDataType extends ELClassifier {
	String industryName
}

class ELEnum extends ELDataType {
	contains ELEnumLiteral[] eLiterals
}

class ELEnumLiteral extends ELNamedElement {
	int value
	String literal
}

abstract class ELModelElement {
	contains ELAnnotation eAnnotations
}

abstract class ELNamedElement extends ELModelElement {
	String name
}

class ELOperation extends ELTypedElement {
	String body
}

class ELPackage extends Module {
	contains ELClassifier[] eClassifiers opposite ^package
	String nsURI
	String nsPrefix
}

class ELReference extends ELStructuralFeature {
	boolean containment
	refers ELClassifier eReferenceType
}

abstract class ELStructuralFeature extends ELTypedElement {
}

abstract class ELTypedElement extends ELNamedElement {
	@xcore.lang.GenModel(suppressedIsSetVisibility="true", suppressedUnsetVisibility="true")
	refers unsettable ELClassifier eType
	int upperBound
	int lowerBound
}

class ELAnnotation extends ELModelElement {
	contains ELStringToStringMapEntry[] details
	String source
}

class ELStringToStringMapEntry {
	String key
	String value
}

class VTLEnrichedCube {
	refers VTLTransformation[] transformations
}

class VTLGeneratedOutputlayer {
	id String name
	refers VTLGeneratedIntermediateLayer[] dependant_intermediate_layers
	contains VTLForOutputLayerAndIntermediateLayerCombination[] VTLForOutputLayerAndIntemedateLayerCombinations
	refers ELClass outputLayer
}

class VTLForOutputLayerAndIntermediateLayerCombination {
	refers VTLTransformation[] transformations
	refers VTLGeneratedOutputlayer outputLayer
	refers VTLGeneratedIntermediateLayer intermediateLayer
	id String name
}

class VTLGeneratedIntermediateLayer {
	refers VTLGeneratedIntermediateLayer dependant_enriched_cubes
	refers VTLTransformation[] transformations
	id String name
	boolean isEnrichment
}

class VTLTransformation {
	String expression
	String description
	id String transformation_id
	String order_in_scheme
}

class VTLScheme {
	contains VTLTransformation[] expressions
	String scheme_id
}

class VTLForSelectionLayer {
	refers LayerSQL selectionLayer
	refers VTLGeneratedOutputlayer outputLayer
	refers VTLGeneratedIntermediateLayer intermediateLayer
}

class VTLModule extends Module {
	contains VTLSchemesModule VTLSchemes
	contains VTLGeneratedOutputlayerModule VTLGeneratedOutputLayers
	contains VTLGeneratedIntermediateLayerModule VTLGeneratedIntermediateLayers
	contains VTLGeneratedIntermediateLayerModule VTLEnrichedLayers
	contains VTLForSelectionLayerModule VTLForSelectionLayers
	contains EntityToVTLIntermediateLayerLinkModule entityToVTLIntermediateLayerLinks
	contains VTLForViewModule VTLForViews
}

class EntityToVTLIntermediateLayerLink {
	refers VTLGeneratedIntermediateLayer VTLIntermediateLayer
	refers ELClass entity
	String filter
}

class VTLForView {
	id String name
	refers View view
	refers VTLGeneratedOutputlayer vtl
}

class VTLGeneratedOutputlayerModule extends Module {
	contains VTLGeneratedOutputlayer[] vTLGeneratedOutputlayerModules
}

class VTLForOutputLayerAndIntermediateLayerCombinationModule extends Module {
	contains VTLForOutputLayerAndIntermediateLayerCombinationModule[] vTLForOutputLayerAndIntermediateLayerCombinations
}

class VTLGeneratedIntermediateLayerModule extends Module {
	contains VTLGeneratedIntermediateLayer[] vTLGeneratedIntermediateLayers
}

class VTLSchemesModule extends Module {
	contains VTLScheme[] vTLSchemes
}

class VTLForSelectionLayerModule extends Module {
	contains VTLForSelectionLayer[] vTLForSelectionLayers
}

class EntityToVTLIntermediateLayerLinkModule extends Module {
	contains EntityToVTLIntermediateLayerLink[] entityToVTLIntermediateLayerLinks
}

class VTLForViewModule extends Module {
	contains VTLForView[] vTLForViews
}