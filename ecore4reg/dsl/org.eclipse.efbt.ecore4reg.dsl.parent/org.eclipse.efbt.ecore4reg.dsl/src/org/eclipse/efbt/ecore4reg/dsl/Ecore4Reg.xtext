/*******************************************************************************
 * Copyright (c) 2020 Bird Software Solutions Ltd
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDE-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Neil Mackenzie - initial API and implementation
 *******************************************************************************/

grammar org.eclipse.efbt.ecore4reg.dsl.Ecore4Reg with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/ecore4reg" as ecore4reg


Module returns ecore4reg::Module:
	Module_Impl | RequirementsModule | TagGroup | GenerationRulesModule | ELPackage;
	
ELClassifier returns ecore4reg::ELClassifier:
	ELClass | ELDataType_Impl | ELEnum ;


ELStructuralFeature returns ecore4reg::ELStructuralFeature:
	ELAttribute | ELReference;


RequirementsSection returns ecore4reg::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;


SelectColumn returns ecore4reg::SelectColumn:
	 SelectColumnMemberAs | SelectColumnAttributeAs | SelectValueAs;



EString returns ecore::EString:
	STRING ;


RequirementsModule returns ecore4reg::RequirementsModule:
	{ecore4reg::RequirementsModule}
	'RequirementsModule'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[ecore4reg::Module|QualifiedName])*
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?		
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

GenerationRulesModule returns ecore4reg::GenerationRulesModule:
	{ecore4reg::GenerationRulesModule}
	'GenerationRuleModule'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[ecore4reg::Module|QualifiedName])*
		('generationRules' '{' views+=RulesForReport ( "," views+=RulesForReport)* '}' )?
	'}';



ELAttribute returns ecore4reg::ELAttribute:
	{ecore4reg::ELAttribute}
	(iD?='id')?
	eAttributeType=[ecore4reg::ELDataType|QualifiedName] ("[" ((  lowerBound=EInt) ".." ( upperBound=EInt))?   "]")?
	name=ID 
	;


ELClass returns ecore4reg::ELClass:
	{ecore4reg::ELClass}
	((abstract?='abstract'? 'class') ) name = ID
	('extends' eSuperTypes+=[ecore4reg::ELClass|QualifiedName] (',' eSuperTypes+=[ecore4reg::ELClass|QualifiedName])*)?
	'{'
	   (eStructuralFeatures+=ELStructuralFeature)*
	   (eOperations+=ELOperation)*
	'}'
	;

ELDataType_Impl returns ecore4reg::ELDataType:
	{ecore4reg::ELDataType}
	'type' name = ID
	'wraps' industryName = ID
	
	;

ELEnum returns ecore4reg::ELEnum:
	{ecore4reg::ELEnum}
	'enum' name = ID
	'{'
	  (eLiterals+=ELEnumLiteral ((',')? eLiterals+=ELEnumLiteral)*)?
	'}';

ELOperation returns ecore4reg::ELOperation:
	{ecore4reg::ELOperation}
	'op'
	eType=[ecore4reg::ELClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	'()'
	'{'(body=EString)?'}'
	;

ELReference returns ecore4reg::ELReference:
	{ecore4reg::ELReference}
	((containment?='contains' ) |
	 ('refers') 
	)
	eType=[ecore4reg::ELClassifier|QualifiedName] ("["((  lowerBound=EInt) ".." ( upperBound=EInt))?  "]")?
	name=ID
	;


ELEnumLiteral returns ecore4reg::ELEnumLiteral:
	{ecore4reg::ELEnumLiteral}
	name=ID
    ('as' literal=STRING)?
    ('=' value=EInt)?
    ;

EInt returns ecore::EInt:
	'-'? INT;


QualifiedName:
	ID ('.' ID)*;
	
Import returns ecore4reg::Import:
	{ecore4reg::Import}
        'import' importedNamespace=QualifiedNameWithWildcard;


QualifiedNameWithWildcard :
	QualifiedName '.*'?;
	



TitledRequirementsSection returns ecore4reg::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=ID
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[ecore4reg::RequirementsSectionLinkWithText|QualifiedName])?
		'requirementsType' requirementsType=[ecore4reg::RequirementType|QualifiedName]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';
	


AllowedTypes returns ecore4reg::AllowedTypes:
	{ecore4reg::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';



Module_Impl returns ecore4reg::Module:
	{ecore4reg::Module}
	'Module'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[ecore4reg::Module|QualifiedName])*
		
	'}';

TagGroup returns ecore4reg::TagGroup:
	{ecore4reg::TagGroup}
	'TagGroup'
	name=QualifiedName
	(imports += Import)*
	'{'
		('annotation' '"dependency"' 'as' dependencies+=[ecore4reg::Module|QualifiedName])*
		('tags' '{' tags+=Tag ( "," tags+=Tag)* '}' )?
	'}';
	
Tag returns ecore4reg::Tag:
	Tag_Impl ;
	

Tag_Impl returns ecore4reg::Tag:
	{ecore4reg::Tag}
	'Tag'
	name=ID
	'{'
		('displayName' displayName=EString)?
		('requirements' '(' requirements+=[ecore4reg::TitledRequirementsSection|QualifiedName] ( "," requirements+=[ecore4reg::TitledRequirementsSection|QualifiedName])* ')' )?
	'}';



RequirementsSectionLinkWithText returns ecore4reg::RequirementsSectionLinkWithText:
	{ecore4reg::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=ID
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[ecore4reg::TitledRequirementsSection|QualifiedName])?
	'}';

RequirementType returns ecore4reg::RequirementType:
	{ecore4reg::RequirementType}
	'RequirementType'
	name=ID;

RequirementsSectionImage returns ecore4reg::RequirementsSectionImage:
	{ecore4reg::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=ID
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns ecore4reg::RequirementsSectionText:
	{ecore4reg::RequirementsSectionText}
	'RequirementsSectionText'
	name=ID
	'{'
		('text' text=EString)?
	'}';

ELPackage returns ecore4reg::ELPackage:
	{ecore4reg::ELPackage}
	'package'
	name = QualifiedName
	(imports += Import)*
	(eClassifiers += ELClassifier)*
	;

RulesForReport returns ecore4reg::RulesForReport:
	{ecore4reg::RulesForReport}
	'Report' outputLayerCube=[ecore4reg::ELClass|QualifiedName]
	'{'
		(rulesForTable+=RulesForILTable (rulesForTable+=RulesForILTable)*  )?
	'}';
	
RulesForILTable returns ecore4reg::RulesForILTable:
	{ecore4reg::RulesForILTable}
	'ILTable' inputLayerTable=[ecore4reg::ELClass|QualifiedName]
	'{'
		(rulesForTablePart+=RuleForILTablePart (rulesForTablePart+=RuleForILTablePart)*  )?
	'}';
	
RuleForILTablePart returns ecore4reg::RuleForILTablePart:
	{ecore4reg::RuleForILTablePart}
	'TablePart'
	name=ID
	'{'
		( columns+=SelectColumn ( columns+=SelectColumn)*  )?
		( whereClause+=TableFilter ( whereClause+=TableFilter)*  )?
	'}';



	
	
TableFilter returns ecore4reg::TableFilter:
	{ecore4reg::TableFilter}
	'where'

		( attribute1=[ecore4reg::ELAttribute|QualifiedName])?
		( comparitor=Comparitor)?
		('member' member=[ecore4reg::ELEnumLiteral|QualifiedName])?
		('value' value=EString)?
;


	
	
SelectColumnMemberAs returns ecore4reg::SelectColumnMemberAs:
	{ecore4reg::SelectColumnMemberAs}
	'SelectMember'
		( memberAsConstant=[ecore4reg::ELEnumLiteral|QualifiedName])?
		('as' asAttribute=[ecore4reg::ELOperation|QualifiedName])?
		;
	
SelectColumnAttributeAs returns ecore4reg::SelectColumnAttributeAs:
	{ecore4reg::SelectColumnAttributeAs}
	'SelectAttribute'
		( attribute=[ecore4reg::ELAttribute|QualifiedName])?
		('as' asAttribute=[ecore4reg::ELOperation|QualifiedName])?
	;
	
SelectValueAs returns ecore4reg::SelectValueAs:
	{ecore4reg::SelectValueAs}
	'SelectValue'
		( value=EString)?
		('as' asAttribute=[ecore4reg::ELOperation|QualifiedName])?
	;

enum Comparitor returns ecore4reg::Comparitor:
				less_than = 'less_than' | equals = 'equals' | equals = 'not_equals' | greater_than = 'greater_than';


	